


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "HelloWorld",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Here we discuss how to install and set up effective tools for Android application development. These include the Android Studio IDE  + an emulator. We&#39;ll also create a simple Android App (HelloWorld), and be able to manage it within the Android Studio environment.</p>",
  "folder" : "book-ahelloworld-lab-01",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Objectives",
    "shortTitle": "HelloWorld",
    "contentMd" : "# Objectives\n\nHere we discuss how to install and set up effective tools for Android application development. These include the Android Studio IDE  + an emulator. We'll also create a simple Android App (HelloWorld), and be able to manage it within the Android Studio environment.\n"
    },
  
    {
    "title": "# Android Studio & SDK Tools",
    "shortTitle": "01",
    "contentMd" : "# Android Studio & SDK Tools\n\n## Instructions for working in Walton Building PC Labs:\n\nIf you are working on the workstations in WIT in the IT Building, Android Studio should already be installed so proceed with the next step of the lab.\n\n##Instructions for working on your own laptop\n\nDownload and install Android Studio from\n\n - <https://developer.android.com/sdk/index.html>\n\nSelect the correct version for your OS. The primary prerequisite for installing Android Studio is that you have a recent Java installation on your workstation. To see if you have Java, and to install it if you do not, visit:\n\n - <http://www.java.com>\n\nAndroid Studio looks after downloading the Android SDK for you but you can download and install the Android SDK separately from\n\n- <https://developer.android.com/sdk/installing/index.html>\n\nThis download is actually the SDK Manager (not the full SDK), where you can choose which versions of the Android platform you want to install & develop with - select <b>anything above API 24 (Version 7.0)</b>. (But I'd leave out all the TV and Wearable stuff :) ) We'll be using API 28 (Version 9.0) for CoffeeMate, so you should get comfortable working with different versions of APIs.\n\nNOTE : these downloads are quite large so it's advisable to have these versions installed <b>BEFORE</b> class.\n\n![Figure 1: Android SDK](img/sdk.png)\n"
    },
  
    {
    "title": "# Your First Android Project - "HelloWorld"",
    "shortTitle": "02",
    "contentMd" : "# Your First Android Project - \"HelloWorld\"\n\nIn Android Studio, select File->New->New Project, or if it's a first run, select \"Start a new Android Studio Project\"\n\n![Figure 1: Start a new Android Studio project](img/firstrun.png)\nPress \"Next\" (or click the option) and then select your Activity type, for this simple app, an **Empty Activity** will suffice\n\n![Figure 2: Choose Your Project](img/new01.png)\nSelect the Platform you want your app to run on - we'll just stick with Phone & Tablet here\n\n![Figure 3: Configure Your Project](img/new02.png)\nChange default project name to HelloWorld, accept the default package name (or provide a company domain) and project location and language. Select an appropriate Minimum SDK (API 28 in the screenshot)\n\nAfter you press \"Finish\", you should now have something similar to the following:\n![Figure 4: Project open in Code View](img/new03.png)\nand\n![Figure 5: Project open in Layout View](img/new04.png)\nIf you don't see both layouts you can switch to 'Design + Blueprint' View\n![Figure 5a: Project open in Layout View](img/new03a.png)\n\nNext, as an exercise, select File->Close Project, to close the project so we can import it again.\n\nIf no other Projects are open you will be displayed with\n![Figure 6: Open Existing Project](img/reload.png)\n\nSo, you can either\n\n1. Select the project from the **Recent Projects** List (on the left) or, if the project you want isn't in the List\n2. Import the project, so, select \"Open an Existing Android Project\" and navigate to the Project folder where you android app is stored (like <b>'HelloWorld'</b> below)\n\n![Figure 8: Select Project Folder to reopen](img/new07.png)\n\nOnce the project is open again, familiarise yourself with the project layout - the initial xml layout or \"screen\" is first displayed, this is one of the many resources you will be using and creating throughout this module. We will experiment later with modifying this layout, but first you should run the application.\n\nSelect the Project (HelloWorld) and then select the 'Play' button as below\n\n![Figure 9: Select Play to Run app](img/play.png)\n\nIf you haven't done so already, you will be asked to select/create an AVD (Android Virtual Device), as follows:\n\n![Figure 10: Select Hardware (Nexus 4 here)](img/avd01.png)\n\nand\n\n![Figure 11: Select System Image](img/avd02.png)\n\nand\n\n![Figure 12: Verify AVD Configuration](img/avd03.png)\n\nand\n\n![Figure 13: List of AVDs currently available](img/avd04.png)\n\n<b>The Virtual Device is very heavy on resources so you may need to choose settings below what is selected in the Screenshots.</b>\n\nOtherwise, use the settings as above and your first Android App should launch, (Once you've unlocked the device!):\n"
    },
  
    {
    "title": "# Our version of "HelloWorld"",
    "shortTitle": "03",
    "contentMd" : "# Our version of \"HelloWorld\"\n\nIn this Step, you will be required to develop and run your own version of the \"Hello World\" Android Project (as seen below).\n\n![Figure 1: Completed App running in Emulator](img/lab1.png)\n\nIf you've deleted your HelloWorld Project, launch Android Studio (if it's not already open) and create a new Android Project called <b>HelloWorld</b> similar to what you did in Step 02.\n\nIf you haven't deleted the project, you can just continue on.\n\nName your package 'ie.wit.helloworld' (like you did before). Choose an <b>Empty</b> Activity and it's recommended you select at least <b>Android 8.0</b> as the launch target platform (but any target will suffice for this particular lab). It's also probably a good idea to run the App at this stage, so you can set up your Virtual Device (if you haven't done so already).\n\nEdit your \"strings.xml\" file (in your res folder) and add the following \"resources\" - be careful if you have created an app which contains a 'menu' folder, this also includes associated resources, so don't overwrite those resources, just add our ones at the end.\n\n~~~xml\n    <string name=\"window_text\">Press the button below to receive a friendly greeting from Android.</string>\n    <string name=\"button_label\">Show Greeting</string>\n    <string name=\"greeting_text\">Hello from Android!</string>\n~~~\n\nYour completed strings.xml (with menu resources) should look like this\n\n~~~xml\n <string name=\"app_name\">HelloWorld</string>\n <string name=\"window_text\">Press the button below to receive a friendly greeting from Android.</string>\n <string name=\"button_label\">Show Greeting</string>\n <string name=\"greeting_text\">Hello from Android!</string>\n~~~\n\nIf you choose \"open editor\" you can see the graphical representation of the String resources you have set up (and edit them there if you need to).\n\nNow, edit your **activity_main.xml** in your <u><i>**layout**</i></u> folder and replace your <b>TextView</b> with the following - make sure your in 'Text' view and not 'Design' view window (so you can see the xml).\n\n~~~xml\n<TextView\n        android:id=\"@+id/textView1\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"80dp\"\n        android:gravity=\"center\"\n        android:text=\"@string/window_text\"\n        android:textAppearance=\"?android:attr/textAppearanceMedium\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <Button\n        android:id=\"@+id/greetingButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentBottom=\"true\"\n        android:layout_centerHorizontal=\"true\"\n        android:layout_marginBottom=\"170dp\"\n        android:onClick=\"showGreeting\"\n        android:text=\"@string/button_label\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\" />\n~~~\n\nThis will give you the following layout (once you select 'Design View' again):\n\n![Figure 3: Updated Activity Layout with TextView and Button widgets](img/new03a.png)\n\nNote how the widgets are 'anchored' to the layout border - this ensures that our button and textview display correctly on the layout at runtime.\n\n![Figure 4: Anchored TextView and Button widgets](img/anchor.png)\n\nIf you can only see a 'Design View' layout, choose 'Design + Blueprint' like before.\n\nOnce again, it's worth running the app at this point to confirm everything is displayed the way we want it. If you click the button, your app will probably crash - we don't have our <b>showGreeting()</b> method implemented yet.\n\nSo, the last thing we need to do is add in our event handling code so that a short message is displayed when the user presses the 'Show Greeting' button.\n\nFirstly, open up the **MainActivity.java** source file and add the following method <b>BEFORE</b> the last closing brace\n\n~~~java\npublic void showGreeting(View v) {\n        String greetingText = getString(R.string.greeting_text);\n        Toast.makeText(this, greetingText, Toast.LENGTH_LONG).show();\n    }\n~~~\n\nYou'll get a few compiler errors due to missing imports, so try and fix those.\n\nNote that we have no need for some kind of Listener interface (ala swing development) - our event handling is taken care of via the ***onClick*** attribute in our xml layout, here's what your completed **MainActivity** Activity class should look like.\n\n~~~java\npackage ie.wit.helloworld;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Toast;\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    public void showGreeting(View v) {\n        String greetingText = getString(R.string.greeting_text);\n        Toast.makeText(this, greetingText, Toast.LENGTH_LONG).show();\n    }\n}\n~~~\n\nSo when you run your app again you should see the message \"Hello From Android!\" displayed.\n\nWe will investigate similar code more closely in the lectures.\n"
    },
  
    {
    "title": "# Exercises",
    "shortTitle": "04",
    "contentMd" : "# Exercises\n\n**Working with Resources**\n\n - Just to get used to adding and editing resources, create a new button for our main layout, and try and 'hook it up' to a new string resource message to display to the user.\n\n**UI Design**\n\n- Have a look at adding in a new colour resource and changing the default colour scheme for the layout.  \n"
    }
  
  ]
  }

