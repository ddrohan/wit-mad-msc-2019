


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-06-a",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>This lab continues our Case Study <b>CoffeeMate</b> with the introduction of a <strong>VOLLEY API</strong> to interact with a Node Web Server.</p>",
  "folder" : "book-coffeemate-lab-06-a",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Objectives",
    "shortTitle": "Lab-06-a",
    "contentMd" : "# Objectives\n\nThis lab continues our Case Study <b>CoffeeMate</b> with the introduction of a **VOLLEY API** to interact with a Node Web Server.\n"
    },
  
    {
    "title": "# Setup - Starter Code, Configuring Volley & Getting All Coffees",
    "shortTitle": "01",
    "contentMd" : "# Setup - Starter Code, Configuring Volley & Getting All Coffees\n\nThis is the CoffeeMate Android app as we left it in Lab 04 : [CoffeeMate.6a.0](archives/CoffeeMate.6a.0.zip)\n\nIf you have completed that lab, then you can use your own project. If not, use the above archive.\n\nIn this lab, you are required to do the following:\n\n- Refactor <b>CoffeeMate</b> to use API calls to manage our Coffees. This particular lab is concerned with using <b>Volley</b> to make our API calls on our Node Server - <b><a href=\"http://coffeemate-nodeserver.herokuapp.com\">CoffeeMate-NodeServer</a></b> and still offer the same functionality on the App.\n\nThe first thing we need to do is import/include the <b>Volley</b> 'Module' in the project. The easiest way to add Volley to your project is to add the following dependency to your app's `build.gradle` file:\n\n~~~xml\nimplementation 'com.android.volley:volley:1.1.1'\n~~~\n\nYou could also clone the Volley repository and set it as a library project:\n\n~~~java\ngit clone https://github.com/google/volley\n~~~\n\nand then Import the downloaded source into your app project as an Android library module.\n\nWe also need Googles GSON so add this to your dependencies also\n\n~~~xml\nimplementation 'com.google.code.gson:gson:2.8.5' // for Googles Gson JSON Parser\n~~~\n\nAnd make sure you allow the correct permissions in the manifest file\n\n~~~xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n~~~\n\nNOTE : If you get a `Clear Text Traffic` Error you'll need to add\n\n~~~xml\nandroid:usesCleartextTraffic=\"true\"\n~~~\n\nto your **application** tag, in your manifest file.\n\nNext, create a new package `ie.cm.api` and create the following within this package.\n\n~~~java\npublic interface VolleyListener {\n    void setList(List list);\n    void setCoffee(Coffee coffee;\n    void updateUI(Fragment fragment);\n}\n~~~\n\nNote : be sure to import `android.support.v4.app.Fragment`\n\nand this class\n\n~~~java\npublic class CoffeeApi {\n\n    private static final String hostURL = \"http://coffeemate-nodeserver.herokuapp.com\";\n    private static final String LocalhostURL = \"http://192.168.0.13:3000\";\n    //private static List<Coffee> result = null;\n    private static VolleyListener vListener;\n\n    public static void attachListener(VolleyListener fragment) { vListener = fragment; }\n    public static void detachListener() {\n        vListener  = null;\n    }\n    public static int FLAG;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    public static void get(String url) {\n\n        // Request a string response\n        JsonObjectRequest gsonRequest = new JsonObjectRequest(Request.Method.GET, hostURL + url,null,\n                new Response.Listener<JSONObject>() {\n                    @Override\n                    public void onResponse(JSONObject response) {\n                        try {\n                            FLAG = response.getInt(\"status\");\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                        // Result handling\n                        List<Coffee> result = null;\n                        Log.v(\"coffeemate\",\"COFFEE JSON DATA : \" + response);\n                        Type collectionType = new TypeToken<List<Coffee>>(){}.getType();\n\n                        try {\n                            result = new Gson().fromJson(response.getString(\"data\"), collectionType);\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                        if(FLAG == 99)vListener.setList(result); //99 indicates a 'GetAll' on Server\n                        vListener.setCoffee(result.get(0));\n                        vListener.updateUI((Fragment)vListener);\n                    }\n                }, new Response.ErrorListener() {\n            @Override\n            public void onErrorResponse(VolleyError error) {\n                // Error handling\n                System.out.println(\"Something went wrong!\");\n                error.printStackTrace();\n            }\n        });\n\n// Add the request to the queue\n        Base.app.add(gsonRequest);\n    }\n}\n~~~\n\nand update your `CoffeeMateApp` with\n\n~~~java\npublic class CoffeeMateApp extends Application\n{\n    private RequestQueue mRequestQueue;\n    private static CoffeeMateApp mInstance;\n    public List <Coffee>  coffeeList = new ArrayList<Coffee>();\n\n    public static final String TAG = CoffeeMateApp.class.getName();\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.v(\"coffeemate\", \"CoffeeMate App Started\");\n        mInstance = this;\n        mRequestQueue = Volley.newRequestQueue(getApplicationContext());\n    }\n\n    public static synchronized CoffeeMateApp getInstance() {\n        return mInstance;\n    }\n\n    public RequestQueue getRequestQueue() {\n        return mRequestQueue;\n    }\n\n    public <T> void add(Request<T> req) {\n        req.setTag(TAG);\n        getRequestQueue().add(req);\n    }\n\n    public void cancel() {\n        mRequestQueue.cancelAll(TAG);\n    }\n\n    @Override\n    public void onTerminate() {\n        super.onTerminate();\n    }\n}\n~~~\n\nand replace\n\n~~~java\npublic CoffeeMateApp app;\n~~~\n\nwith\n\n~~~java\npublic static CoffeeMateApp\tapp = CoffeeMateApp.getInstance();\n~~~\n\nin your `Base` class and fix any import errors along the way.\n\n\nThe last thing we need to do is refactor our `CoffeeFragment` to request all the coffees from the server so:\n\n\n- Make your `CoffeeFragment` implement our `VolleyListener` (and choose to implement the methods, like so)\n~~~java\n@Override\n    public void setList(List list) {\n        activity.app.coffeeList = list;\n    }\n~~~\nand\n~~~java\n@Override\n    public void updateUI(Fragment fragment) {\n        fragment.onResume();\n    }\n~~~\n\n- `Attach` your **CoffeeApi** using\n~~~java\nCoffeeApi.attachListener(this);\n~~~\n- For housekeeping, `Detach` your **CoffeeApi** using\n~~~java\nCoffeeApi.detachListener();\n~~~\n- GET the coffees from the server when the Fragment is **created** using\n~~~java\nCoffeeApi.get(\"/coffees\");\n~~~\n- Add this method\n~~~java\npublic void updateView() {\n       listAdapter = new CoffeeListAdapter(activity, this, activity.app.coffeeList);\n       coffeeFilter = new CoffeeFilter(activity.app.coffeeList,\"all\",listAdapter);\n\n       if (favourites) {\n           coffeeFilter.setFilter(\"favourites\"); // Set the filter text field from 'all' to 'favourites'\n           coffeeFilter.filter(null); // Filter the data, but don't use any prefix\n       }\n       setListView(v);\n\n       if(!favourites)\n           getActivity().setTitle(R.string.recentlyViewedLbl);\n       else\n           getActivity().setTitle(R.string.favouritesCoffeeLbl);\n\n       listAdapter.notifyDataSetChanged(); // Update the adapter\n   }\n~~~\nand this property\n~~~java\npublic View v;\n~~~\n- Replace your `onCreateView()` with this\n~~~java\n@Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup parent, Bundle savedInstanceState) {\n\n        // Inflate the layout for this fragment\n        v = inflater.inflate(R.layout.fragment_home, parent, false);\n        listView = v.findViewById(R.id.homeList);\n        updateView();\n        return v;\n    }\n~~~\n- and implement/override the `onResume()` with this\n~~~java\npublic void onResume() {\n      super.onResume();\n      CoffeeApi.attachListener(this);\n      updateView();\n  }\n~~~\n\nNOTE: Be clear why we have had to refactor how and when the layout gets rendered as it's the pivotal reason why we use the `VolleyListener` like we do.\n\nAdd the necessary imports, clean the Project (if necessary) and the errors should be fixed, and if you run the app, you should get something like the following (depending on what's on the server at the time of making the api request)\n\n ![](img/volleyscreen1.png)\n\n and your 'View Favourites' should also be working.\n\n Note the `Logcat` also, I added a simple\n\n ~~~java\n Log.v(\"coffeemate\",\"COFFEE JSON DATA : \" + response);\n ~~~\n\ninside `CoffeeApi` GET request to confirm the JSON string returned from the server.\n\n![](img/json.png)\n\n<i><b>I would strongly recommend taking some time to have a look at the `CoffeeApi` and `VolleyListener` classes - especially the API Calls and how we utilise a 'Callback Interface'.</b></i> We've also had to refactor our `CoffeeFragment` slightly, specifically the `onCreateView()` due to the nature of making network requests and the impact on the UI (already discussed in the Lectures).\n\nThe remainder of this lab involves using <b>Volley</b> to interact with the Web App.\n\nFor reference, here's the complete `CoffeeFragment` class after the above refactoring\n\n~~~java\npackage ie.cm.fragments;\n\nimport android.app.AlertDialog;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.util.Log;\nimport android.view.ActionMode;\nimport android.view.LayoutInflater;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AbsListView;\nimport android.widget.AdapterView;\nimport android.widget.ListView;\n\nimport java.util.List;\n\nimport ie.cm.R;\nimport ie.cm.activities.Base;\nimport ie.cm.adapters.CoffeeFilter;\nimport ie.cm.adapters.CoffeeListAdapter;\nimport ie.cm.api.CoffeeApi;\nimport ie.cm.api.VolleyListener;\nimport ie.cm.models.Coffee;\n\npublic class CoffeeFragment  extends Fragment implements\n        AdapterView.OnItemClickListener,\n        View.OnClickListener,\n        AbsListView.MultiChoiceModeListener,\n        VolleyListener\n{\n    public Base activity;\n    public static CoffeeListAdapter listAdapter;\n    public ListView listView;\n    public CoffeeFilter coffeeFilter;\n    public boolean favourites = false;\n    public View v;\n\n    public CoffeeFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n        Bundle activityInfo = new Bundle(); // Creates a new Bundle object\n        activityInfo.putString(\"coffeeId\", (String) view.getTag());\n\n        Fragment fragment = EditFragment.newInstance(activityInfo);\n        getActivity().setTitle(R.string.editCoffeeLbl);\n\n        getActivity().getSupportFragmentManager().beginTransaction()\n                .replace(R.id.homeFrame, fragment)\n                .addToBackStack(null)\n                .commit();\n    }\n\n\n    public static CoffeeFragment newInstance() {\n        CoffeeFragment fragment = new CoffeeFragment();\n        return fragment;\n    }\n\n    @Override\n    public void onAttach(Context context)\n    {\n        super.onAttach(context);\n        this.activity = (Base) context;\n        CoffeeApi.attachListener(this);\n    }\n\n    @Override\n    public void onDetach() {\n        super.onDetach();\n        CoffeeApi.detachListener();\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n        CoffeeApi.get(\"/coffees\");\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup parent, Bundle savedInstanceState) {\n\n        // Inflate the layout for this fragment\n        v = inflater.inflate(R.layout.fragment_home, parent, false);\n        listView = v.findViewById(R.id.homeList);\n        updateView();\n        return v;\n    }\n\n    public void setListView(View view)\n    {\n        listView.setAdapter (listAdapter);\n        listView.setOnItemClickListener(this);\n        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);\n        listView.setMultiChoiceModeListener(this);\n        listView.setEmptyView(view.findViewById(R.id.emptyList));\n    }\n\n    @Override\n    public void onStart()\n    {\n        super.onStart();\n    }\n\n    public void onResume() {\n        super.onResume();\n        CoffeeApi.attachListener(this);\n        updateView();\n    }\n\n    public void updateView() {\n        listAdapter = new CoffeeListAdapter(activity, this, activity.app.coffeeList);\n        coffeeFilter = new CoffeeFilter(activity.app.coffeeList,\"all\",listAdapter);\n\n        if (favourites) {\n            coffeeFilter.setFilter(\"favourites\"); // Set the filter text field from 'all' to 'favourites'\n            coffeeFilter.filter(null); // Filter the data, but don't use any prefix\n            //listAdapter.notifyDataSetChanged(); // Update the adapter\n        }\n        setListView(v);\n\n        if(!favourites)\n            getActivity().setTitle(R.string.recentlyViewedLbl);\n        else\n            getActivity().setTitle(R.string.favouritesCoffeeLbl);\n\n        listAdapter.notifyDataSetChanged(); // Update the adapter\n    }\n\n    @Override\n    public void onClick(View view)\n    {\n        if (view.getTag() instanceof Coffee)\n        {\n            onCoffeeDelete ((Coffee) view.getTag());\n        }\n    }\n\n    public void onCoffeeDelete(final Coffee coffee)\n    {\n        String stringName = coffee.name;\n        AlertDialog.Builder builder = new AlertDialog.Builder(activity);\n        builder.setMessage(\"Are you sure you want to Delete the \\'Coffee\\' \" + stringName + \"?\");\n        builder.setCancelable(false);\n\n        builder.setPositiveButton(\"Yes\", new DialogInterface.OnClickListener()\n        {\n            public void onClick(DialogInterface dialog, int id)\n            {\n                activity.app.coffeeList.remove(coffee); // remove from our list\n                listAdapter.coffeeList.remove(coffee); // update adapters data\n                listAdapter.notifyDataSetChanged(); // refresh adapter\n            }\n        }).setNegativeButton(\"No\", new DialogInterface.OnClickListener()\n        {\n            public void onClick(DialogInterface dialog, int id)\n            {\n                dialog.cancel();\n            }\n        });\n        AlertDialog alert = builder.create();\n        alert.show();\n    }\n\n    /* ************ MultiChoiceModeListener methods (begin) *********** */\n    @Override\n    public boolean onCreateActionMode(ActionMode actionMode, Menu menu)\n    {\n        MenuInflater inflater = actionMode.getMenuInflater();\n        inflater.inflate(R.menu.delete_list_context, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {\n        return false;\n    }\n\n    @Override\n    public boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem)\n    {\n        switch (menuItem.getItemId())\n        {\n            case R.id.menu_item_delete_coffee:\n                deleteCoffees(actionMode);\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    public void deleteCoffees(ActionMode actionMode)\n    {\n        for (int i = listAdapter.getCount() -1 ; i >= 0; i--)\n        {\n            if (listView.isItemChecked(i))\n            {\n                activity.app.coffeeList.remove(listAdapter.getItem(i));\n                if (favourites)\n                   listAdapter.coffeeList.remove(listAdapter.getItem(i));\n            }\n        }\n        listAdapter.notifyDataSetChanged(); // refresh adapter\n        actionMode.finish();\n    }\n\n    @Override\n    public void onDestroyActionMode(ActionMode actionMode)\n    {}\n\n    @Override\n    public void onItemCheckedStateChanged(ActionMode actionMode, int i, long l, boolean b) {\n    }\n    /* ************ MultiChoiceModeListener methods (end) *********** */\n\n    @Override\n    public void setList(List list) {\n        activity.app.coffeeList = list;\n    }\n\n    @Override\n    public void setCoffee(Coffee coffee) {\n    }\n\n    @Override\n    public void updateUI(Fragment fragment) {\n        fragment.onResume();\n    }\n}\n\n~~~\n"
    },
  
    {
    "title": "# Adding a Coffee to our Server",
    "shortTitle": "02",
    "contentMd" : "# Adding a Coffee to our Server\n\nAt this stage, we've made a simple **GET** request on the Server - now let's make some **POST** Requests and add a coffee to the list maintained on the server.\n\nFirst though, we need to slightly refactor our `Coffee` class to match our JSON object (as it's coming from a mongo db) so replace the `coffeeId` field with `_id` (to match the mongo autogenerated field) and don't forget to update your `CoffeeItem` with\n\n~~~java\nview.setTag(coffee._id);\n~~~\n\nOnce that's done, we need to update our `CoffeeApi` class and add in a new method to allow us to **POST** our coffee to the server, so open up your **CoffeeApi.java** and add the following:\n\n~~~java\npublic static void post(String url,Coffee aCoffee) {\n        Log.v(\"coffeemate\", \"POSTing to : \" + url);\n        Type objType = new TypeToken<Coffee>(){}.getType();\n        String json = new Gson().toJson(aCoffee, objType);\n        JSONObject jsonObject = null;\n\n        try {\n            jsonObject = new JSONObject(json);\n        }\n        catch (JSONException e) {\n            e.printStackTrace();\n        }\n\n        JsonObjectRequest gsonRequest = new JsonObjectRequest( Request.Method.POST, hostURL + url, jsonObject,\n                new Response.Listener<JSONObject>() {\n                    @Override\n                    public void onResponse(JSONObject response) {\n                        Log.v(\"coffeemate\", \"insert new Coffee \" + response.toString());\n                    }\n                },\n                new Response.ErrorListener() {\n                    @Override\n                    public void onErrorResponse(VolleyError error) { // Handle Error\n                        Log.v(\"coffeemate\", \"Unable to insert new Coffee\");\n                    }\n                }) {\n\n            @Override\n            public Map<String, String> getHeaders() throws AuthFailureError {\n                HashMap<String, String> headers = new HashMap<String, String>();\n                headers.put(\"Content-Type\", \"application/json; charset=utf-8\");\n\n                return headers;\n            }\n        };\n        // Add the request to the queue\n        Base.app.add(gsonRequest);\n    }\n~~~\nFix any import errors you have and take some time to investigate how this method achieves our goal of\n\n- accepting a coffee object as a parameter\n\n- converting this object into a JSON String (using Gson)\n\n- POSTing this JSON String to the server\n\nYou can always ask the Lecturer for some more detail if necessary.\n\nThe next thing we need to do is refactor our `AddFragment` and integrate our API class so open up your **AddFragment.java** and have a go at implementing what we need.\n\nThere's actually very little to this so if you've added the necessary code correctly, you should be able to add a coffee in the same way as in **CoffeeMate.4.0** but this time, the coffee is added to the list of coffees on the server **NOT** on the device (via a list or a database).\n\nAnd don't worry, the solution is next :)\n"
    },
  
    {
    "title": "# Updating a Coffee on the Server",
    "shortTitle": "03",
    "contentMd" : "# Updating a Coffee on the Server\n\nBefore we make a start at updating a coffee, here is the line of code necessary for adding a coffee (replacing our 'add' call)\n\n~~~java\nCoffeeApi.post(\"/coffees\",c);\n~~~\n\nUnfortunately, updating a coffee isn't as simple and straightforward as the last step, in that we need to\n\n- display the coffee details (that the user has selected) on the Edit Screen via a **GET** request\n\n- send a **PUT** request to update our coffee on the server\n\n- return the user to the screen they were on before they chose to edit their coffee (**NOT** the Home Screen as with the 'Add' option)\n\n\nSo, the first thing to do is add the following to your current **CoffeeApi** and fix any import errors\n\n~~~java\npublic static void put(String url,Coffee aCoffee) {\n\n      Log.v(\"coffeemate\", \"PUTing to : \" + url);\n      Type objType = new TypeToken<Coffee>(){}.getType();\n      String json = new Gson().toJson(aCoffee, objType);\n\n      JSONObject jsonObject = null;\n      try {\n          jsonObject = new JSONObject(json);\n      } catch (JSONException e) {\n          e.printStackTrace();\n      }\n\n      JsonObjectRequest gsonRequest = new JsonObjectRequest( Request.Method.PUT, hostURL + url,\n\n              jsonObject,\n              new Response.Listener<JSONObject>() {\n                  @Override\n                  public void onResponse(JSONObject response) {\n                      // Result handling\n                      Coffee result = null;\n                      Type objType = new TypeToken<Coffee>(){}.getType();\n\n                      try {\n                          result = new Gson().fromJson(response.getString(\"data\"), objType);\n                      } catch (JSONException e) {\n                          e.printStackTrace();\n                      }\n                      get(\"/coffees\"); // Force refresh of Server List\n                      Log.v(\"coffeemate\", \"Updating a Coffee successful with :\" + response);\n                  }\n              },\n              new Response.ErrorListener() {\n                  @Override\n                  public void onErrorResponse(VolleyError error) {\n                      //   Handle Error\n                      Log.v(\"coffeemate\", \"Unable to update Coffee with error : \" + error.getMessage());\n                  }\n              }) {\n          @Override\n          public Map<String, String> getHeaders() throws AuthFailureError {\n              HashMap<String, String> headers = new HashMap<String, String>();\n              headers.put(\"Content-Type\", \"application/json; charset=utf-8\");\n              //headers.put(\"User-agent\", System.getProperty(\"http.agent\"));\n              return headers;\n          }\n      };\n      // Add the request to the queue\n      Base.app.add(gsonRequest);\n  }\n\n  public static void delete(String url) {\n        Log.v(\"coffeemate\", \"DELETEing from \" + url);\n\n        // Request a string response\n        StringRequest stringRequest = new StringRequest(Request.Method.DELETE, hostURL + url,\n                new Response.Listener<String>() {\n                    @Override\n                    public void onResponse(String response) {\n                        // Result handling\n                        Log.v(\"coffeemate\", \"DELETE success \" + response);\n                    }\n                }, new Response.ErrorListener() {\n            @Override\n            public void onErrorResponse(VolleyError error) {\n                // Error handling\n                Log.v(\"coffeemate\",\"Something went wrong with DELETE!\");\n                error.printStackTrace();\n            }\n        });\n\n        // Add the request to the queue\n        Base.app.add(stringRequest);\n    }\n~~~\n\n\nNext, open your **EditFragment.java** and ensure it implements our **VolleyListener** interface as covered in the lectures (and fix any errors). Then add the following variable instance (like we did in our `CoffeeFragment`)\n\n~~~java\npublic View v;\n~~~\n\nand make sure you `Attach` and `Detach` your `CoffeeApi` correctly.\n\nNext, replace your **onCreateView()** with\n\n~~~java\n@Override\n  public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                           Bundle savedInstanceState) {\n      // Inflate the layout for this fragment\n      v = inflater.inflate(R.layout.fragment_edit, container, false);\n      return v;\n  }\n~~~\n\nand your **updateUI()** with\n\n~~~java\n@Override\n    public void updateUI(Fragment fragment) {\n        ((TextView)v.findViewById(R.id.editTitleTV)).setText(aCoffee.name);\n\n        name = v.findViewById(R.id.editNameET);\n        shop = v.findViewById(R.id.editShopET);\n        price = v.findViewById(R.id.editPriceET);\n        ratingBar = v.findViewById(R.id.editRatingBar);\n        editFavourite = v.findViewById(R.id.editFavourite);\n\n        name.setText(aCoffee.name);\n        shop.setText(aCoffee.shop);\n        price.setText(\"\"+aCoffee.price);\n        ratingBar.setRating((float)aCoffee.rating);\n\n        if (aCoffee.favourite == true) {\n            editFavourite.setImageResource(R.drawable.favourites_72_on);\n            isFavourite = true;\n        } else {\n            editFavourite.setImageResource(R.drawable.favourites_72);\n            isFavourite = false;\n        }\n~~~\n\n(if you haven't already done so, as per the Lectures).\n\nNow, see if you can complet this step by retrieving the correct coffee from the server when the fragment loads, and then update it when the user hits the 'save' button.\n\nBefore you get to actually update the coffee on the server, it's probably worth testing your app along the way to see if everything is working correctly, so run your app to confirm you get to see the coffee details on the Edit Screen once the user has selected a particular coffee to edit, like so\n\n\n![](img/editscreen1.png)\n\nand if the user selects to edit \"Mocca Latte\"\n\n![](img/editscreen2.png)\n\nand back on the home page...\n\n![](img/editscreen3.png)\n\nWe'll move on to Deleting Coffees next.\n"
    },
  
    {
    "title": "# Deleting Coffees from the Server",
    "shortTitle": "04",
    "contentMd" : "# Deleting Coffees from the Server\n\nAs we already have all the necessary code in place from previous versions of CoffeeMate, we have a full APi class available to us, this step is very simple - we just need to change our delete method(s) to delete the specific coffee (or multiple coffees) from the server, and not the database, as is currently the case.\n\nwe achieve deleting a single coffee by calling our **CoffeeApi** 'delete' method like so\n\n~~~java\nCoffeeApi.delete(\"/coffees/\" + coffee._id);\n~~~\n\nso see if you can work out where this call should go, and what code it should replace?\n\nWe can use the same method call to delete multiple coffees so try and have a go at implementing this feature (which we covered in the lectures).\n"
    },
  
    {
    "title": "# Adding a 'Waiting' Dialog",
    "shortTitle": "05",
    "contentMd" : "# Adding a 'Waiting' Dialog\n\nAt this Stage your CoffeeMate App should be able to View/Add/Delete & Update coffees, and view your favourite coffees (like before), all on the server.\n\nNow, you've probably noticed that there's no real indication to the user that the app is downloading data from a Server when it launches - this isn't ideal as the user may think the app has crashed, so here, we'll add a 'Waiting' Dialog to give some basic feedback to the user about what's going on. We'll also add a 'SwipeRefreshLayout' in the final step, so the user can refresh the list at any stage to check for changes on the server.\n\n\nwe want to create a simple layout to display the progress of the download so that we have something like this\n\n![](img/progressscreen.png)\n\nso first of all, create a new layout called **loading.xml** and replace it with this (you'll need to create a new string resource 'messageLoading' too)\n\n~~~xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"horizontal\"\n    android:padding=\"20dp\">\n    <ProgressBar\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_weight=\"1\" />\n\n    <TextView\n        android:id=\"@+id/loaderTV\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"4\"\n        android:gravity=\"center\"\n        android:text=\"@string/messageLoading\"\n        android:textSize=\"12sp\" />\n</LinearLayout>\n~~~\n\nNext, add the following to your `Base` class\n\n~~~java\n public static AlertDialog loader;\n~~~\n\nand\n\n~~~java\npublic void createLoader() {\n       AlertDialog.Builder loaderBuilder = new AlertDialog.Builder(this);\n       loaderBuilder.setCancelable(true); // 'false' if you want user to wait\n       loaderBuilder.setView(R.layout.loading);\n       loader = loaderBuilder.create();\n       loader.setTitle(R.string.appDisplayName);\n       loader.setIcon(R.drawable.favourites_72);\n   }\n~~~\n\nand call the above in your `Home` activity's **onCreate()**.\n\nThen, for simplicity, replace your current `CoffeeApi` with this (and have a quick look at how the refactored **get** works)\n\n~~~java\npackage ie.cm.api;\n\nimport android.app.AlertDialog;\nimport android.support.v4.app.Fragment;\nimport android.util.Log;\n\nimport com.android.volley.AuthFailureError;\nimport com.android.volley.Request;\nimport com.android.volley.Response;\nimport com.android.volley.VolleyError;\nimport com.android.volley.toolbox.JsonObjectRequest;\nimport com.android.volley.toolbox.StringRequest;\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport ie.cm.R;\nimport ie.cm.activities.Base;\nimport ie.cm.models.Coffee;\n\npublic class CoffeeApi {\n\n    private static final String hostURL = \"http://coffeemate-nodeserver.herokuapp.com\";\n    private static final String LocalhostURL = \"http://192.168.0.13:3000\";\n    //private static List<Coffee> result = null;\n    private static VolleyListener vListener;\n    private static AlertDialog loader;\n\n    public static void attachListener(VolleyListener fragment) { vListener = fragment; }\n    public static void detachListener() {\n        vListener  = null;\n    }\n    public static void attachDialog(AlertDialog aloader) {\n        loader = aloader;\n    }\n    public static int FLAG;\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    public static void get(String url) {\n        showLoader();\n        // Request a string response\n        JsonObjectRequest gsonRequest = new JsonObjectRequest(Request.Method.GET, hostURL + url,null,\n                new Response.Listener<JSONObject>() {\n                    @Override\n                    public void onResponse(JSONObject response) {\n                        try {\n                            FLAG = response.getInt(\"status\");\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                        // Result handling\n                        List<Coffee> result = null;\n                        Log.v(\"coffeemate\",\"COFFEE JSON DATA : \" + response);\n                        Type collectionType = new TypeToken<List<Coffee>>(){}.getType();\n\n                        try {\n                            result = new Gson().fromJson(response.getString(\"data\"), collectionType);\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                        if(FLAG == 99)vListener.setList(result); //99 indicates a 'GetAll' on Server\n                        vListener.setCoffee(result.get(0));\n                        vListener.updateUI((Fragment)vListener);\n                        hideLoader();\n                    }\n                }, new Response.ErrorListener() {\n            @Override\n            public void onErrorResponse(VolleyError error) {\n                // Error handling\n                System.out.println(\"Something went wrong!\");\n                error.printStackTrace();\n            }\n        });\n\n// Add the request to the queue\n        Base.app.add(gsonRequest);\n    }\n\n    public static void post(String url,Coffee aCoffee) {\n        Log.v(\"coffeemate\", \"POSTing to : \" + url);\n        Type objType = new TypeToken<Coffee>(){}.getType();\n        String json = new Gson().toJson(aCoffee, objType);\n        JSONObject jsonObject = null;\n\n        try {\n            jsonObject = new JSONObject(json);\n        }\n        catch (JSONException e) {\n            e.printStackTrace();\n        }\n\n        JsonObjectRequest gsonRequest = new JsonObjectRequest( Request.Method.POST, hostURL + url, jsonObject,\n                new Response.Listener<JSONObject>() {\n                    @Override\n                    public void onResponse(JSONObject response) {\n                        Log.v(\"coffeemate\", \"insert new Coffee \" + response.toString());\n                    }\n                },\n                new Response.ErrorListener() {\n                    @Override\n                    public void onErrorResponse(VolleyError error) { // Handle Error\n                        Log.v(\"coffeemate\", \"Unable to insert new Coffee\");\n                    }\n                }) {\n\n            @Override\n            public Map<String, String> getHeaders() throws AuthFailureError {\n                HashMap<String, String> headers = new HashMap<String, String>();\n                headers.put(\"Content-Type\", \"application/json; charset=utf-8\");\n\n                return headers;\n            }\n        };\n\n        // Add the request to the queue\n        Base.app.add(gsonRequest);\n    }\n\n    public static void put(String url,Coffee aCoffee) {\n\n        Log.v(\"coffeemate\", \"PUTing to : \" + url);\n        Type objType = new TypeToken<Coffee>(){}.getType();\n        String json = new Gson().toJson(aCoffee, objType);\n\n        JSONObject jsonObject = null;\n        try {\n            jsonObject = new JSONObject(json);\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n\n        JsonObjectRequest gsonRequest = new JsonObjectRequest( Request.Method.PUT, hostURL + url,\n\n                jsonObject,\n                new Response.Listener<JSONObject>() {\n                    @Override\n                    public void onResponse(JSONObject response) {\n                        // Result handling\n                        Coffee result = null;\n                        Type objType = new TypeToken<Coffee>(){}.getType();\n\n                        try {\n                            result = new Gson().fromJson(response.getString(\"data\"), objType);\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                        get(\"/coffees\"); // Forcing a refresh of the updated list on the Server\n                        Log.v(\"coffeemate\", \"Updating a Coffee successful with : \" + response);\n                    }\n                },\n                new Response.ErrorListener() {\n                    @Override\n                    public void onErrorResponse(VolleyError error) {\n                        //   Handle Error\n                        Log.v(\"coffeemate\", \"Unable to update Coffee with error : \" + error.getMessage());\n                    }\n                }) {\n            @Override\n            public Map<String, String> getHeaders() throws AuthFailureError {\n                HashMap<String, String> headers = new HashMap<String, String>();\n                headers.put(\"Content-Type\", \"application/json; charset=utf-8\");\n                //headers.put(\"User-agent\", System.getProperty(\"http.agent\"));\n                return headers;\n            }\n        };\n        // Add the request to the queue\n        Base.app.add(gsonRequest);\n    }\n\n    public static void delete(String url) {\n        Log.v(\"coffeemate\", \"DELETEing from \" + url);\n\n        // Request a string response\n        StringRequest stringRequest = new StringRequest(Request.Method.DELETE, hostURL + url,\n                new Response.Listener<String>() {\n                    @Override\n                    public void onResponse(String response) {\n                        // Result handling\n                        Log.v(\"coffeemate\", \"DELETE success \" + response);\n                    }\n                }, new Response.ErrorListener() {\n            @Override\n            public void onErrorResponse(VolleyError error) {\n                // Error handling\n                Log.v(\"coffeemate\",\"Something went wrong with DELETE!\");\n                error.printStackTrace();\n            }\n        });\n\n        // Add the request to the queue\n        Base.app.add(stringRequest);\n    }\n\n    private static void showLoader() {\n        if (!loader.isShowing()) {\n            loader.show();\n        }\n    }\n\n    private static void hideLoader() {\n        if (loader.isShowing())\n            loader.dismiss();\n    }\n}\n~~~\n\n\nand finally, add the following to your `CoffeeFragment`'s **onAttach()**\n\n~~~java\nCoffeeApi.attachDialog(activity.loader);\n~~~\n\nRun your app to confirm you get a loading message (even if it's very brief!) and see if you can refactor your app to display the message wherever it's required.\n\n\nAlso, see if you can make the minor changes to get something like this\n\n![](img/prog1.png)\n\nand if the user deletes some coffees\n\n![](img/prog2.png)\n"
    },
  
    {
    "title": "# Adding a 'Swipe to Refresh'",
    "shortTitle": "06",
    "contentMd" : "# Adding a 'Swipe to Refresh'\n\nThere may be situations that the Server data changes while the user is viewing their list, so we'll give them the option of 'refreshing' the list by swiping instead of having to 'Go Home' to reload the list.\n\nFirst of all, wrap your **ListView** in a **SwipeRefreshLayout** in both your `fragment_home` and `fragment_search` layouts like so - you may need to fix/adjust the layouts after this update.\n\n~~~xml\n<android.support.v4.widget.SwipeRefreshLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:id=\"@+id/swiperefresh\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n    <ListView\n        android:id=\"@+id/homeList\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0dp\"\n        android:layout_marginTop=\"8dp\"\n        app:layout_constraintBottom_toTopOf=\"@+id/footer\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"0.06999999\" />\n    </android.support.v4.widget.SwipeRefreshLayout>\n~~~\n\nNext, add the following to your `Base` class\n\n~~~java\n public static AlertDialog loader;\n~~~\n\nand\n\n~~~java\npublic void createLoader() {\n       AlertDialog.Builder loaderBuilder = new AlertDialog.Builder(this);\n       loaderBuilder.setCancelable(true); // 'false' if you want user to wait\n       loaderBuilder.setView(R.layout.loading);\n       loader = loaderBuilder.create();\n       loader.setTitle(R.string.appDisplayName);\n       loader.setIcon(R.drawable.favourites_72);\n   }\n~~~\n\nThen, in your `CoffeeFragment` class add\n\n~~~java\npublic void setSwipeRefresh(View v)\n  {\n      SwipeRefreshLayout swipeRefresh = v.findViewById(R.id.swiperefresh);\n      swipeRefresh.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n          @Override\n          public void onRefresh() {\n              CoffeeApi.get(\"/coffees\");\n          }\n      });\n  }\n\n  public void checkSwipeRefresh(View v)\n  {\n      SwipeRefreshLayout swipeRefresh = v.findViewById(R.id.swiperefresh);\n      if (swipeRefresh.isRefreshing()) swipeRefresh.setRefreshing(false);\n  }\n~~~\n\nNow, see if you can add in the necessary calls to implement this 'Swipe to Refresh' feature.\n\nDon't forget to test your `SearchFragment` too!\n\nWhen you're finished, you should be seeing something like this (again, possibly all but briefly)\n\n\n![](img/swipe.png)\n\nRun your app once again and ask a classmate to add/change/delete coffees on the server and test out the swipe refresh to confirm you've completed this lab successfully - Well Done!\n"
    },
  
    {
    "title": "# Solution",
    "shortTitle": "Solution",
    "contentMd" : "# Solution\n\nThis is a solution which uses a Web Service and **Volley** to manage the Coffees in the app:\n\n- [CoffeeMate.6a.0](archives/CoffeeMate.6a.0.Solution.zip)\n"
    }
  
  ]
  }

