


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-07",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>This lab continues our Case Study <b>CoffeeMate</b> and once again, yet another major refactoring of the app, where we introduce some basic security using <b>Google Sign-in</b>.</p>",
  "folder" : "book-coffeemate-lab-07",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Objectives",
    "shortTitle": "Lab-07",
    "contentMd" : "# Objectives\n\nThis lab continues our Case Study <b>CoffeeMate</b> and once again, yet another major refactoring of the app, where we introduce some basic security using <b>Google Sign-in</b>.\n"
    },
  
    {
    "title": "# Setting Up Google Sign-in",
    "shortTitle": "01",
    "contentMd" : "# Setting Up Google Sign-in\n\nAs we'll need to make a few http requests, we'll start with [CoffeeMate.6a.0](archives/CoffeeMate.6a.0.Solution.zip) as this has **VOLLEY** implemented, but you could in theory, continue on with your own version.\n\nWe now want our CoffeeMate App to interact with our Web App (<a href=\"http://coffeemate-fullfat.herokuapp.com\">CoffeeMate-FULLFAT-nodeserver</a>) AND allow the user to manage their own specific coffees, so we'll use <b>Google Sign-in</b> support to allow us to connect to the Web App and Add/Edit/Delete/View User Coffees stored on the Server.\n\nBefore you can start integrating Google Services features in your own app, you must create a <b><i>Google Developers Console project</i></b> and initialise the <b>GoogleApiClient</b> within your app.\n\n### Step 1: Configure for Google Sign-In\n\nBefore you begin using Google Services in your Android app, follow all of the steps to <a href=\"https://developers.google.com/identity/sign-in/android/start-integrating\">Start Integrating Google Sign-In into your Android App</a>.\n\n### Step 2: Enable the Google+ API\n\nIf you followed the steps above correctly, to add Google Sign-In to your app, you have already created a project in Google Developers Console. Now enable the Google+ API for that project to access Google+ features.\n\n- Go to the <a href=\"https://console.developers.google.com/project/_/apiui/apis/library\"><Google Developers Console APIs library</a>.\n- From the project drop-down, select the <a href=\"https://support.google.com/cloud/answer/6158853\">project</a> you previously created.\n- In the list of Google APIs, search for the <b>Google+ API</b> service.\n- Select <b>Google+ API</b> from the results list.\n- Select <b>Enable API</b>.\n\nWhen the process completes, <b>Google+ API</b> appears in the list of enabled APIs. To access, select <b>API Manager</b> on the left sidebar menu, then select the <b>Enabled APIs</b> tab.\n\n### Step 3: Create our Login Page & Google instance variables\n\nHere we'll just create a standard Login Page through Android Studio, so go ahead and Add a new `Login` activity like so\n\n![](img/login1.png)\n\nand\n\n![](img/login2.png)\n\nYou might get a 'git' dialog box, which you can just choose ok\n\n![](img/git.png)\n\nThen add the following dependency to your **app/build.gradle**\n\n~~~xml\nimplementation 'com.shobhitpuri.custombuttons:google-signin:1.0.0'\n~~~\n\nadd the following button to your new 'login' layout (and don't forget a new String Resource 'google_sign_up')\n\n~~~xml\n<com.shobhitpuri.custombuttons.GoogleSignInButton\n               android:id=\"@+id/google_sigin_button\"\n               android:layout_width=\"match_parent\"\n               android:layout_height=\"64dp\"\n               android:elevation=\"9dp\"\n               android:text=\"@string/google_sign_up\"\n               android:textSize=\"18sp\"\n               app:isDarkTheme=\"true\" />\n~~~\n\nYou might need to add the following to your layout\n\n~~~xml\nxmlns:app=\"http://schemas.android.com/apk/res-auto\"\n~~~\n\n You should now have something like this\n\n ![](img/login3.png)\n\n We're actually going to bypass the manual signin/register for the moment (and all the boilerplate code supplied!) and just focus on signing in with Google.\n\n Finally, add the following to your `CoffeeMateApp` declarations\n\n ~~~java\n /* Client used to interact with Google APIs. */\n    public GoogleApiClient mGoogleApiClient;\n    public GoogleSignInOptions mGoogleSignInOptions;\n\n    public boolean signedIn = false;\n    public String googleToken;\n    public String googleName;\n    public String googleMail;\n    public String googlePhotoURL;\n    public Bitmap googlePhoto;\n~~~\n\nand fix any import errors.\n\nWe're now ready to set up the Login process.\n"
    },
  
    {
    "title": "# Implementing Google Sign-in",
    "shortTitle": "02",
    "contentMd" : "# Implementing Google Sign-in\n\nWhat we want is something like this:\n\nThe user launches the app\n\n ![](img/signin0.png)\n\n\nand (after a Splash Screen) is prompted to `Sign In with Google`, like so\n\n![](img/signin1.png)\n\nIf the user hasn't previously logged in, they will be asked to choose an existing Account, or add a different account (that's what we'll do here)\n\n![](img/signin2.png)\n\nThe user is then prompted for their Google credentials\n\n![](img/signin3.png)\n\n![](img/signin4.png)\n\nand then asked to agree to the usual...\n\n![](img/signin5.png)\n\nThe additional account can now be chosen as the active Google account in the app\n\n![](img/signin6.png)\n\nand we can display the users Google Profile pic, and email in the Navigation Drawer like so (I'm logged in here)\n\n![](img/signin7.png)\n\n___\n\nThere's quite a lot of code (relatively speaking) to get this off the ground, so we'll use this step as more of a 'configuration' step, and hopefully once you've completed this, you'll be able to **'Go Green'** on your own app :-) (Reduce,Reuse,Recycle my code).\n\nWe'll be phasing out our **Base** class here too, so the first step is keeping a reference to our application object and Dialog in **Home**, like so\n\n~~~java\npublic static CoffeeMateApp app = CoffeeMateApp.getInstance();\npublic AlertDialog loader;\n~~~\n\n\nMake sure you move the **createLoader()** and **menu** methods to `Home` and remove the references from **Base** and fix any errors.\n\nYou should now be able to delete the `Base` class altogether.\n\nNow bring in the following method into your **Home** activity class\n\n~~~java\n// [START signOut]\n    public void menuSignOut(MenuItem m) {\n\n        //https://stackoverflow.com/questions/38039320/googleapiclient-is-not-connected-yet-on-logout-when-using-firebase-auth-with-g\n        app.mGoogleApiClient.connect();\n        app.mGoogleApiClient.registerConnectionCallbacks(new GoogleApiClient.ConnectionCallbacks() {\n            @Override\n            public void onConnected(@Nullable Bundle bundle) {\n\n                //FirebaseAuth.getInstance().signOut();\n                if(app.mGoogleApiClient.isConnected()) {\n                    Auth.GoogleSignInApi.signOut(app.mGoogleApiClient).setResultCallback(new ResultCallback<Status>() {\n                        @Override\n                        public void onResult(@NonNull Status status) {\n                            if (status.isSuccess()) {\n                                //Log.v(\"coffeemate\", \"User Logged out\");\n                                Intent intent = new Intent(Home.this, Login.class);\n                                startActivity(intent);\n                                finish();\n                            }\n                        }\n                    });\n                }\n            }\n\n            @Override\n            public void onConnectionSuspended(int i) {\n                 Toast.makeText(Home.this, \"Google API Client Connection Suspended\",Toast.LENGTH_SHORT).show();\n            }\n        });\n    }\n    // [END signOut]\n~~~\n\nAlso, just confirm that you have the following permissions in your manifest file\n\n~~~xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n~~~\n\nand the following in your build.gradle\n\n~~~xml\nimplementation 'com.google.android.gms:play-services-auth:15.0.1'\n~~~\n\nNext, bring in a 'Logout' Option in your Menu, like so\n\n~~~xml\n<item\n        android:id=\"@+id/menu_signout\"\n        android:title=\"Logout\"\n        android:orderInCategory=\"100\"\n        app:showAsAction=\"never\"\n        android:onClick=\"menuSignOut\"/>\n~~~\n\nNow, introduce the following variable in your **Home** Activity\n\n~~~java\nprivate ImageView googlePhoto;\n~~~\n\nand the following code in your **onCreate()** method **BEFORE** your fragment transaction\n\n~~~java\n//SetUp GooglePhoto and Email for Drawer here\n        googlePhoto = navigationView.getHeaderView(0).findViewById(R.id.googlephoto);\n        CoffeeApi.getGooglePhoto(app.googlePhotoURL,googlePhoto);\n\n        TextView googleName = navigationView.getHeaderView(0).findViewById(R.id.googlename);\n        googleName.setText(app.googleName);\n\n        TextView googleMail = navigationView.getHeaderView(0).findViewById(R.id.googlemail);\n        googleMail.setText(app.googleMail);\n~~~\n\nYou'll get an error on\n~~~java\nCoffeeApi.getGooglePhoto(app.googlePhotoURL,googlePhoto);\n~~~\nso add the following method to your **CoffeeApi** class\n\n~~~java\npublic static void getGooglePhoto(String url,final ImageView googlePhoto) {\n        ImageRequest imgRequest = new ImageRequest(url,\n                new Response.Listener<Bitmap>() {\n                    @Override\n                    public void onResponse(Bitmap response) {\n                        Home.app.googlePhoto = response;\n                        googlePhoto.setImageBitmap(Home.app.googlePhoto);\n                    }\n                }, 0, 0, ImageView.ScaleType.FIT_XY, Bitmap.Config.ARGB_8888,\n\n                new Response.ErrorListener() {\n                    @Override\n                    public void onErrorResponse(VolleyError error) {\n                        System.out.println(\"Something went wrong!\");\n                        error.printStackTrace();\n                    }\n                });\n        // Add the request to the queue\n        Home.app.add(imgRequest);\n    }\n~~~\n\n\nIf you get errors on ***googlename*** and ***googlemail***, just confirm the following in your 'nav_header_home.xml'\n\n![](img/navdrawer.png)\n\nWe should probably also allow the user to 'disconnect' their account from the app so add the following to your login layout (and add the necessary string resource)\n\n~~~xml\n<com.shobhitpuri.custombuttons.GoogleSignInButton\n    android:id=\"@+id/google_disconnect_button\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"64dp\"\n    android:elevation=\"9dp\"\n    android:text=\"@string/google_disconnect\"\n    android:textSize=\"18sp\"\n    app:isDarkTheme=\"false\" />\n~~~\n\nand you'll get something like this\n\n![](img/disconnect.png)\n\nNow we're ready to start the actual login process\n\n## Building the Google Client\n\nFirst, open your existing `Login` class and add the following declarations\n\n~~~java\npublic CoffeeMateApp app = CoffeeMateApp.getInstance();\n /* Request code used to invoke sign in user interactions. */\nprivate static final int RC_SIGN_IN = 0;\nprivate static final String TAG = \"coffeemate\";\n~~~\n\nthen go to your **onCreate()** and add the following\n\n~~~java\n// [START configure_signin]\n       // Configure sign-in to request the user's ID, email address, and basic\n       // profile. ID and basic profile are included in DEFAULT_SIGN_IN.\n       app.mGoogleSignInOptions = new GoogleSignInOptions\n               .Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\n               .requestEmail()\n               .requestProfile()\n               .build();\n       // [END configure_signin]\n\n       // [START build_client]\n       // Build a GoogleApiClient with access to the Google Sign-In API and the\n       // options specified by mGoogleSignInOptions.\n       app.mGoogleApiClient = new GoogleApiClient.Builder(this)\n               .enableAutoManage(this /* FragmentActivity */,\n                       this /* OnConnectionFailedListener */)\n               .addApi(Auth.GOOGLE_SIGN_IN_API, app.mGoogleSignInOptions)\n               .build();\n       // [END build_client]\n\n       findViewById(R.id.google_sigin_button).setOnClickListener(this);\n       findViewById(R.id.google_disconnect_button).setOnClickListener(this);\n~~~\n\nFix the import errors and then the remaining errors by implementing the necessary interfaces, like so\n\n![](img/google1.png)\n\nand\n\n![](img/google2.png)\n\nNext, add the following\n\n~~~java\n// [START signIn]\n   private void signIn() {\n       Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(app.mGoogleApiClient);\n       startActivityForResult(signInIntent, RC_SIGN_IN);\n   }\n   // [END signIn]\n\n   // [START revokeAccess]\n   private void revokeAccess() {\n       Auth.GoogleSignInApi.revokeAccess(app.mGoogleApiClient).setResultCallback(\n               new ResultCallback<Status>() {\n                   @Override\n                   public void onResult(Status status) {\n                       // [START_EXCLUDE]\n                       startLoginScreen();\n                       // [END_EXCLUDE]\n                   }\n               });\n   }\n   // [END revokeAccess]\n\n   private void startHomeScreen() {\n       Intent intent = new Intent(this, Home.class);\n       startActivity(intent);\n   }\n\n   private void startLoginScreen() {\n       Intent intent = new Intent(this, Login.class);\n       startActivity(intent);\n   }\n~~~\n\nand replace the implemented methods with these\n\n~~~java\n@Override\n public void onClick(View v) {\n\n     if (v.getId() == R.id.google_sigin_button) {\n         signIn();\n     }\n     else\n     if (v.getId() == R.id.google_disconnect_button) {\n         revokeAccess();\n     }\n }\n\n @Override\n public void onConnectionFailed(ConnectionResult connectionResult) {\n     Toast.makeText(this, \"Error Signing in to Google \" + connectionResult, Toast.LENGTH_LONG).show();\n     Log.v(TAG, \"ConnectionResult : \" + connectionResult);\n }\n~~~\n\n\nYou then need to add the following to **start** and **handle** the sign in process\n\n~~~java\n@Override\n    public void onStart() {\n        super.onStart();\n\n        OptionalPendingResult<GoogleSignInResult> opr = Auth.GoogleSignInApi.silentSignIn(app.mGoogleApiClient);\n        if (opr.isDone()) {\n            // If the user's cached credentials are valid, the OptionalPendingResult will be \"done\"\n            // and the GoogleSignInResult will be available instantly.\n            Log.d(TAG, \"Got cached sign-in\");\n            GoogleSignInResult result = opr.get();\n            handleSignInResult(result);\n        } else {\n            // If the user has not previously signed in on this device or the sign-in has expired,\n            // this asynchronous branch will attempt to sign in the user silently.  Cross-device\n            // single sign-on will occur in this branch.\n            //showProgressDialog();\n            opr.setResultCallback(new ResultCallback<GoogleSignInResult>() {\n                @Override\n                public void onResult(GoogleSignInResult googleSignInResult) {\n                    handleSignInResult(googleSignInResult);\n                }\n            });\n        }\n    }\n\n    // [START onActivityResult]\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n\n        // Result returned from launching the Intent from GoogleSignInApi.getSignInIntent(...);\n        if (requestCode == RC_SIGN_IN) {\n            GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);\n            handleSignInResult(result);\n        }\n    }\n    // [END onActivityResult]\n\n    // [START handleSignInResult]\n    private void handleSignInResult(GoogleSignInResult result) {\n        Log.d(TAG, \"handleSignInResult:\" + result.isSuccess());\n        if (result.isSuccess()) {\n            // Signed in successfully, show authenticated UI.\n            GoogleSignInAccount acct = result.getSignInAccount();\n            app.googleName = acct.getDisplayName();\n\n            // by default the profile url gives 50x50 px image only\n            // we can replace the value with whatever dimension we want by\n            // replacing sz=X\n//            personPhotoUrl = personPhotoUrl.substring(0,\n//                    personPhotoUrl.length() - 2)\n//                    + 100;\n\n            app.googleToken = acct.getId();\n            app.signedIn = true;\n            app.googleMail = acct.getEmail();\n            if(acct.getPhotoUrl() == null)\n                ; //New Account may not have Google+ photo\n            else app.googlePhotoURL = acct.getPhotoUrl().toString();\n\n            // Show a message to the user that we are signing in.\n            Toast.makeText(this, \"Signing in \" + app.googleName +\" with \" + app.googleMail , Toast.LENGTH_SHORT).show();\n            startHomeScreen();\n        } else\n            Toast.makeText(this, \"Please Sign in \" , Toast.LENGTH_SHORT).show();\n    }\n    // [END handleSignInResult]\n~~~\n\nThere's 2 other small steps, but vital ones, to get your Login Screen loading after your splash Screen and getting the correct coffees - and I'll leave that up to you.\n\nOnce you get the app running and a user Signing in - you'll see that the list can be downloaded as before, and the users Google credentials are displayed in the Nav Drawer - but these coffees aren't associated with any user, they're just stored on the server anonymously, so to speak - the rest of the lab involves refactoring our code to make API requests on the Server to Add/Delete/Update etc. users coffees specifically.\n\nTo save you time, and if you ran into any configuration issues, here's a version of CoffeeMate up to this point [CoffeeMate.7.0.sofar.zip](archives/CoffeeMate.7.0.sofar.zip)\n"
    },
  
    {
    "title": "# Google Integration - Retrieving 'My Coffees'",
    "shortTitle": "03",
    "contentMd" : "# Google Integration - Retrieving 'My Coffees'\n\n\nAt the moment the user is seeing a list of **all** coffees stored on the server, so let's make the app a bit more user friendly and download **_only_** the users coffees.\n\nThis is actually a very simple step, all we need to do is modify our APi call and add the users Google credentials to the request (which we already have) like so:\n\n~~~java\nCoffeeApi.get(\"/coffees/\" + app.googleToken);\n~~~\n\nso now when we run the app we only see the current users coffees - here's mine (at the time of the request)\n\n![](img/mine.png)\n\nMake sure you're connecting to the **full fat** version of our web server and don't forget to update the other calls, as in when you delete, refresh etc.\n"
    },
  
    {
    "title": "# Google Integration - Adding a Coffee",
    "shortTitle": "04",
    "contentMd" : "# Google Integration - Adding a Coffee\n\nAdding a coffee is nearly as easy as the last step, as all we need to do is change 2 lines of code in our `AddFragment`.\n\nIt's virtually identical to the last step, so have a go at that now, and confirm that you can add ***your own*** coffees to the server.\n\nIf you notice that your coffees aren't being added as expected, can you work out why not? Again, this is an easy fix :)\n\nAs a hint, make sure, your `Coffee Model` matches your `JSON Model` on the Server.\n\n## JSON From FULL FAT server\n\n~~~json\n{\n    \"status\": 99,\n    \"message\": \"User Coffees Successfully Retrieved!\",\n    \"data\": [\n        {\n            \"favourite\": false,\n            \"_id\": \"5c00111111111116cd95b0\",\n            \"name\": \"Standard Black lite\",\n            \"shop\": \"Tescos\",\n            \"price\": 1.99,\n            \"rating\": 2.5,\n            \"marker\": \"\",\n            \"address\": \"\",\n            \"usertoken\": \"111111111111111118125\",\n            \"googlephoto\": \"https://l/photo.jpg\",\n            \"__v\": 0\n        },\n        {\n            \"favourite\": false,\n            \"_id\": \"5c0012311111111116cd95b1\",\n            \"name\": \"Mocca Latte\",\n            \"shop\": \"Aldi\",\n            \"price\": 2.99,\n            \"rating\": 3.5,\n            \"marker\": \"\",\n            \"address\": \"\",\n            \"usertoken\": \"111111111111111118125\",\n            \"googlephoto\": \"https://l/photo.jpg\",\n            \"__v\": 0\n        },\n        {\n            \"favourite\": true,\n            \"_id\": \"5c001251111111111195b2\",\n            \"name\": \"Home Brew\",\n            \"shop\": \"The gaff\",\n            \"price\": 0.99,\n            \"rating\": 4.5,\n            \"marker\": \"\",\n            \"address\": \"\",\n            \"usertoken\": \"111111111111111118125\",\n            \"googlephoto\": \"https://l/photo.jpg\",\n            \"__v\": 0\n        },\n        {\n            \"favourite\": false,\n            \"_id\": \"5c00243f1111111111018aa\",\n            \"name\": \"test\",\n            \"shop\": \"shop\",\n            \"price\": 1.99,\n            \"rating\": 2.5,\n            \"usertoken\": \"111111111111111118125\",\n            \"googlephoto\": \"https://l/photo.jpg\",\n            \"__v\": 0\n        }\n    ]\n}\n~~~\n"
    },
  
    {
    "title": "# Google Integration - Updating a Coffee",
    "shortTitle": "05",
    "contentMd" : "# Google Integration - Updating a Coffee\n\nUpdating a coffee is nearly as easy as adding, in that all we need to do is change a few lines of code in our `EditFragment`. We also need to make a minor change to our `CoffeeApi` **PUT**, but we'll get to that in a minute.\n\nSo, the first thing to do is make sure you can retrieve the users coffee and display in on the Edit screen, like so\n\n![](img/edit1.png)\n\nTo achieve this you'll need to modify how you **GET** the coffee from the server in your `EditFragment`, so try that now.\n\nNext, to **PUT** the coffee, you need to make a similar change to how you save the coffee, so try that now too.\n\nYou'll notice that in the **put()** method in our `CoffeeApi` we're not passing in the **usertoken** when we force a **get()** to refresh our list of coffees, so this is where we need to refactor the method signature, and pass in the usertoken which we can then use to **GET** the coffees again.\n\nThis is just a matter of passing in a *String* variable to the method, representing the usertoken, so have a go at that now and see how you get on.\n\nNOTE : As we're passing in the token already, there's a number of different solutions to this, so feel free to try your own.\n\nIf all goes to plan you should be able to edit a users coffee on the server and see this change when the user is returned to the screen they were on, prior to editing their coffee.\n"
    },
  
    {
    "title": "# Google Integration - Deleting Coffees",
    "shortTitle": "06",
    "contentMd" : "# Google Integration - Deleting Coffees\n\n\nAs we already have all the necessary code in place from previous versions of CoffeeMate, AND we still have a full APi class available to us, this step is very simple - we just need to change our delete method(s) to delete the specific user coffee (or multiple coffees) from the server.\n\nwe achieve deleting a single coffee by calling our **CoffeeApi** 'delete' method like so\n\n~~~java\nCoffeeApi.delete(\"/coffees/\" + app.googleToken +\"/\" + coffee._id);\n~~~\nso see if you can work out where this call should go, and what code it should replace?\n\nWe can use the same method call to delete multiple coffees so try and have a go at implementing this feature (which was covered in the lectures).\n\nAfter some testing, you may find that the delete isn't working as expected, so I'd suggest taking the same approach as we took with updating - forcing a **GET** after we updated.\n\nThat completes this lab and you can find a solution on the next page.\n"
    },
  
    {
    "title": "#Solution",
    "shortTitle": "Solution",
    "contentMd" : "#Solution\n\nThis is a solution which uses a Web Service and <b>Volley</b> with <b>Google Sign-in</b> to manage the Coffees in the app:\n\n- [CoffeeMate.7.0](archives/CoffeeMate.7.0.Solution.zip)\n"
    }
  
  ]
  }

