


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-08",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>This lab is the final lab in the current version and completes our Case Study <b>CoffeeMate</b> with the introduction of <strong>Location Awareness</strong> and <strong>Google Maps</strong> in version <b>CoffeeMate.8.0</b>.</p>",
  "folder" : "book-coffeemate-lab-08",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#Objectives",
    "shortTitle": "Lab-08",
    "contentMd" : "#Objectives\n\n\nThis lab is the final lab in the current version and completes our Case Study <b>CoffeeMate</b> with the introduction of **Location Awareness** and **Google Maps** in version <b>CoffeeMate.8.0</b>.\n"
    },
  
    {
    "title": "# Setup - Starter Code",
    "shortTitle": "01",
    "contentMd" : "# Setup - Starter Code\n\nUnlike previous labs, you don't need to download the starter code for this lab as it's basically a copy of **CoffeeMate.7.0**, so if you wish, you could just continue on with your own version. If you didn't get a chance to finish the previous lab you can download the CoffeeMate.7.0 solution here - [CoffeeMate.7.0.Solution](archives/CoffeeMate.7.0.Solution.zip).\n\nEither way, It's probably still a good idea to run the App and confirm that the app (our your app) is configured properly and (still) running.\n\nIn this lab, you are required to do the following:\n\n- Add Location awareness to the App (via a custom MapsFragment class)\n\n- Add a Google Map, so the user can see their coffees displayed on a Map\n\n- Add Volley Support to CoffeeMate to manage our coffees and their locations on the server (our APi already does most of this)\n\nThe following steps will guide you through these requirements, but before we can do anything with the Google Maps, you need to obtain your own Google Maps Key to add to your manifest file.\n"
    },
  
    {
    "title": "# Obtaining your Google Maps Key",
    "shortTitle": "02",
    "contentMd" : "# Obtaining your Google Maps Key\n\nFirst of all, you need to [Get an API Key](https://developers.google.com/maps/documentation/android-api/signup) on the Android Developer site as it contains all the info you need to obtain your Key. You'll have some of the work done already (from the previous lab) but there's still a bit of work to do, so if you get stuck just ask.\n\nOnce you have your key, the next thing to do is add the following to your strings.xml\n\n~~~xml\n<string name=\"title_map\">Coffee Map</string>\n<string name=\"google_maps_key\">abcdefghijklmnopetcetcetc</string>\n~~~\n\nwhere 'abcdefghijklmnopetcetcetc' is your API Key.\n\nNext, open up your manifest file and add the following just before the **closing** \"application\" tag\n\n~~~xml\n<meta-data\n    android:name=\"com.google.android.geo.API_KEY\"\n    android:value=\"@string/google_maps_key\" />\n\n    <uses-library android:name=\"org.apache.http.legacy\" android:required=\"false\"/>\n~~~\n\nAlso, in your manifest file add the following permissions\n\n~~~xml\n<uses-permission android:name=\"ie.cm.permission.MAPS_RECEIVE\"/>\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\n~~~\n\nAt the time of writing (December 2018) there were a few updates to dependency versions made (which this lab is based on) so can you confirm your `app/build.gradle` is very similar to the following\n\n~~~xml\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 28\n    defaultConfig {\n        applicationId \"ie.cm\"\n        minSdkVersion 28\n        targetSdkVersion 28\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation 'com.android.support:appcompat-v7:28.0.0'\n    implementation 'com.android.support:support-v4:28.0.0'\n    implementation 'com.android.support:design:28.0.0'\n    implementation 'com.android.support.constraint:constraint-layout:1.1.3'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'com.android.support.test:runner:1.0.2'\n    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'\n\n    implementation 'com.makeramen:roundedimageview:2.2.1'\n    implementation \"com.android.support:recyclerview-v7:28.0.0\"\n    implementation \"com.android.support:cardview-v7:28.0.0\"\n    implementation 'com.android.volley:volley:1.1.1'\n    implementation 'com.google.code.gson:gson:2.8.5' // for Googles Gson JSON Parser\n\n    implementation 'com.google.android.gms:play-services-auth:15.0.1'\n    implementation 'com.google.android.gms:play-services-maps:15.0.1'\n    implementation 'com.google.android.gms:play-services-location:15.0.1'\n\n    implementation 'com.shobhitpuri.custombuttons:google-signin:1.0.0'\n}\n\n//apply plugin: 'com.google.gms.google-services'\n~~~\n\nand you've got\n\n~~~xml\nclasspath 'com.google.gms:google-services:3.2.0'\n~~~\n\nin your `project/build.gradle`.\n\nSync, and then go ahead and create a new **Empty Activity** and name the Layout **_activity_map_** - this isn't really that important as we will be disregarding the activity in the next step including the layout - we are just using it here to confirm we have configured our key etc. correctly.\n\n![](img/mapactivity.png)\n\nnow add the following to the layout\n\n~~~xml\n<fragment android:name=\"com.google.android.gms.maps.MapFragment\"\n        android:id=\"@+id/map\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n~~~\n\nFinally, (for this step) add the following to your Home Activity, to temporarily handle launching our new Map activity, if the user selects the menu option.\n\n~~~java\nelse if (id == R.id.nav_map) {\nstartActivity(new Intent(this, Map.class));\n}\n\n~~~\nRun your app and select \"View on Map\"\n\n![](img/map1.png)\n\nand if everything goes according to plan, you should get\n\n![](img/map2.png)\n\n\nCongratulations - you can now go ahead and build map based apps!\n"
    },
  
    {
    "title": "# View Users Current Location",
    "shortTitle": "03",
    "contentMd" : "# View Users Current Location\n\nAt the moment, when the user selects the 'Map' menu option, they get to see a standard map, but not their own location (or even their coffees locations), so this step (and the next) is about implementing that (we'll look at the coffees location in later steps).\n\nI used this link [here](https://github.com/googlesamples/android-play-location/blob/master/LocationUpdates/app/src/main/java/com/google/android/gms/location/sample/locationupdates/MainActivity.java) for some of the functionality we needed using the latest features of the Api (Dec 2018)\n\nAs we want to keep in line with the UI guidelines and approach, it makes sense to use a <i>Fragment</i> so first of all go ahead and create a new (Blank) Fragment called **MapsFragment** (***NOT*** MapFragment) but **DON'T** create a layout or include interface callbacks\n\n![](img/lab0704.png)\n\nMake sure it extends from ***SupportMapFragment*** and implements the following interfaces, like so\n\n~~~java\npublic class MapsFragment extends SupportMapFragment implements\n        GoogleMap.OnInfoWindowClickListener,\n        GoogleMap.OnMapClickListener,\n        GoogleMap.OnMarkerClickListener,\n        OnMapReadyCallback {\n...\n}\n~~~\n\nFix the errors and replace the existing **_newInstance()_** method with this one\n\n~~~java\npublic static MapsFragment newInstance() {\n    MapsFragment fragment = new MapsFragment();\nreturn fragment;\n}\n~~~\n\nReplace the existing instance variables with these\n\n~~~java\nprivate LocationRequest             mLocationRequest;\n    private FusedLocationProviderClient mFusedLocationClient;\n    private LocationCallback            mLocationCallback;\n    private List<Coffee>                mCoffeeList;\n    private long                        UPDATE_INTERVAL = 5000; /* 5 secs */\n    private long                        FASTEST_INTERVAL = 1000; /* 1 sec */\n    private GoogleMap                   mMap;\n    private float                       zoom = 13f;\n\n    public CoffeeMateApp                app = CoffeeMateApp.getInstance();\n\n    private static final int            PERMISSION_REQUEST_CODE = 200;\n\n    private final int[]                 MAP_TYPES = {\n                                            GoogleMap.MAP_TYPE_SATELLITE,\n                                            GoogleMap.MAP_TYPE_NORMAL,\n                                            GoogleMap.MAP_TYPE_HYBRID,\n                                            GoogleMap.MAP_TYPE_TERRAIN,\n                                            GoogleMap.MAP_TYPE_NONE\n                                            };\n\n    private int                         curMapTypeIndex = 1;\n~~~\n\nReplace **_onCreate()_** with\n\n~~~java\n@Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        try {\n            mFusedLocationClient = LocationServices.getFusedLocationProviderClient(getActivity());\n            createLocationCallback();\n            createLocationRequest();\n        }\n        catch(SecurityException se) {\n            Toast.makeText(getActivity(),\"Check Your Permissions\",Toast.LENGTH_SHORT).show();\n        }\n    }\n~~~\n\nand add\n\n~~~java\nprivate void createLocationRequest() {\n      mLocationRequest = new LocationRequest();\n      mLocationRequest.setInterval(UPDATE_INTERVAL);\n      mLocationRequest.setFastestInterval(FASTEST_INTERVAL);\n      mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\n      //mLocationRequest.setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY);\n  }\n\n   /* Creates a callback for receiving location events.*/\n  private void createLocationCallback() {\n      mLocationCallback = new LocationCallback() {\n          @Override\n          public void onLocationResult(LocationResult locationResult) {\n              super.onLocationResult(locationResult);\n\n              app.mCurrentLocation = locationResult.getLastLocation();\n              initCamera(app.mCurrentLocation);\n          }\n      };\n  }\n~~~\n\nRemove **_onCreateView()_** and replace with\n\n~~~java\n@Override\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n        setHasOptionsMenu(true);\n\n         getActivity().setTitle(R.string.title_map);\n    }\n~~~\n\nAdd/implement the following methods\n\n~~~java\npublic void initListeners() {\n       mMap.setOnMarkerClickListener(this);\n       mMap.setOnInfoWindowClickListener(this);\n       mMap.setOnMapClickListener(this);\n   }\n\n   @Override\n   public void onResume() {\n       super.onResume();\n       getMapAsync(this);\n       if (checkPermission()) {\n           if (app.mCurrentLocation != null) {\n               Toast.makeText(getActivity(), \"GPS location was found!\", Toast.LENGTH_SHORT).show();\n           } else {\n               Toast.makeText(getActivity(), \"Current location was null, Setting Default Values!\", Toast.LENGTH_SHORT).show();\n               app.mCurrentLocation = new Location(\"Waterford City Default (WIT)\");\n               app.mCurrentLocation.setLatitude(52.2462);\n               app.mCurrentLocation.setLongitude(-7.1202);\n           }\n           if(mMap != null) {\n               initCamera(app.mCurrentLocation);\n               mMap.setMyLocationEnabled(true);\n           }\n           startLocationUpdates();\n       }\n       else if (!checkPermission()) {\n           requestPermission();\n       }\n   }\n\n   private void initCamera(Location location) {\n       if (zoom != 13f && zoom != mMap.getCameraPosition().zoom)\n           zoom = mMap.getCameraPosition().zoom;\n\n       CameraPosition position = CameraPosition.builder()\n               .target(new LatLng(location.getLatitude(),\n                       location.getLongitude()))\n               .zoom(zoom).bearing(0.0f)\n               .tilt(0.0f).build();\n\n       mMap.animateCamera(CameraUpdateFactory\n               .newCameraPosition(position), null);\n   }\n\n   public void startLocationUpdates() {\n       try {\n               mFusedLocationClient.requestLocationUpdates(mLocationRequest,\n                   mLocationCallback, Looper.myLooper());\n       }\n       catch(SecurityException se) {\n           Toast.makeText(getActivity(),\"Check Your Permissions on Location Updates\",Toast.LENGTH_SHORT).show();\n       }\n   }\n~~~\n\nAnd replace the relevant methods with the following\n\n~~~java\n@Override\n    public void onMapReady(GoogleMap googleMap) {\n        mMap = googleMap;\n        mMap.setMapType(MAP_TYPES[curMapTypeIndex]);\n\n        initListeners();\n        if(checkPermission()) {\n            mMap.setMyLocationEnabled(true);\n            initCamera(app.mCurrentLocation);\n        }\n        else if (!checkPermission()) {\n            requestPermission();\n        }\n            mMap.getUiSettings().setMapToolbarEnabled(true);\n            mMap.getUiSettings().setCompassEnabled(true);\n            mMap.getUiSettings().setMyLocationButtonEnabled(true);\n            mMap.getUiSettings().setAllGesturesEnabled(true);\n            mMap.setTrafficEnabled(true);\n            mMap.setBuildingsEnabled(true);\n            mMap.getUiSettings().setZoomControlsEnabled(true);\n    }\n\n    //http://www.journaldev.com/10409/android-handling-runtime-permissions-example\n      private boolean checkPermission() {\n          int result = ContextCompat.checkSelfPermission(getActivity(), ACCESS_FINE_LOCATION);\n\n          return result == PackageManager.PERMISSION_GRANTED;\n      }\n\n      private void requestPermission() {\n          ActivityCompat.requestPermissions(getActivity(), new String[]{ACCESS_FINE_LOCATION},\n                  PERMISSION_REQUEST_CODE);\n      }\n\n      @Override\n      public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {\n          switch (requestCode) {\n              case PERMISSION_REQUEST_CODE:\n                  if (grantResults.length > 0) {\n\n                      boolean locationAccepted = grantResults[0] == PackageManager.PERMISSION_GRANTED;\n\n                      if (locationAccepted) {\n                          Snackbar.make(getView(), \"Permission Granted, Now you can access location data.\",\n                                  Snackbar.LENGTH_LONG).show();\n                          if(checkPermission())\n                              mMap.setMyLocationEnabled(true);\n                          startLocationUpdates();\n                      }\n                      else {\n\n                          Snackbar.make(getView(), \"Permission Denied, You cannot access location data.\",\n                                  Snackbar.LENGTH_LONG).show();\n\n                          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n                              if (shouldShowRequestPermissionRationale(ACCESS_FINE_LOCATION)) {\n                                  showMessageOKCancel(\"You need to allow access to both the permissions\",\n                                          new DialogInterface.OnClickListener() {\n                                              @Override\n                                              public void onClick(DialogInterface dialog, int which) {\n                                                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n                                                      requestPermissions(new String[]{ACCESS_FINE_LOCATION},\n                                                              PERMISSION_REQUEST_CODE);\n                                                  }\n                                              }\n                                          });\n                                  return;\n                              }\n                          }\n                      }\n                  }\n                  break;\n          }\n      }\n\n    private void showMessageOKCancel(String message, DialogInterface.OnClickListener okListener) {\n        new AlertDialog.Builder(getActivity())\n                .setMessage(message)\n                .setPositiveButton(\"OK\", okListener)\n                .setNegativeButton(\"Cancel\", null)\n                .create()\n                .show();\n    }\n~~~\n\nNow, open your **Home** Activity and instead of loading the Map Activity (as is currently the case) implement the necessary code to display our **MapsFragment**.\n\nIf you run the app now you will probably get a\n\n~~~xml\njava.lang.NullPointerException: Appropriate Api was not requested.\n~~~\n\nerror so you need to add\n\n~~~java\n.addApi(LocationServices.API)\n~~~\n\nto your GoogleClient when you build it in your **Login** activity, so fix that now.\n\nIf you've followed all the steps correctly, and you run the app again you should be seeing something like this (make sure to accept the permissions)\n\n![](img/map3.png)\n\nand then this\n\n![](img/map4.png)\n\nExperiment with different coordinates and restarting your app and then use the emulator to send coordinates while the app is running (as below) as see what happens?\n\nThe next few steps will be about building on the Location Awareness of our App and updating the Map automatically, as the user moves around and adding a 'Marker' to show these movements.\n\nBefore you move on, just confirm your app is now Location Aware, like so, when you 'View on Map'\n\n![](img/map4.png)\n\nbut when you send new coordinates to the emulator, you should see the 'blue dot' move to that new location, as below\n\n![](img/lab0709.png)\n\n![](img/lab0707.png)\n\n![](img/map5.png)\n"
    },
  
    {
    "title": "# View Users Coffee Locations",
    "shortTitle": "04",
    "contentMd" : "# View Users Coffee Locations\n\nThe last step in this lab involves displaying the users coffees on the map (with a marker which you can get [here](archives/coffeeicon.png) and add to your 'drawable' resources folder), along with the users location (which was the previous step) so we need to modify a few classes here, namely\n\n- MapsFragment\n- AddFragment\n\nbut even before that we need to refactor our `Coffee` model so go ahead and add the following classes in your 'models' package\n\n~~~java\npublic class Coords {\n    public double latitude;\n    public double longitude;\n}\n~~~\n\nand\n\n~~~java\npublic class Marker {\n    public int id = 1;\n    public Coords coords = new Coords();\n}\n~~~\n\nthen replace your existing `Coffee` class with the following\n\n~~~java\npublic class Coffee\n{\n\tpublic String _id;\n\tpublic String name;\n\tpublic String shop;\n\tpublic double rating;\n\tpublic double price;\n\tpublic boolean favourite;\n\tpublic String googlephoto;\n\tpublic String usertoken;\n\tpublic String address;\n\tpublic Marker marker = new Marker();\n\n\tpublic Coffee() {}\n\n\tpublic Coffee(String name, String shop, double rating,\n\t\t\t\t  double price, boolean fav, String photo, String token,\n\t\t\t\t  String address, double lat, double lng)\n\t{\n\t\t//this._id = UUID.randomUUID().toString();\n\t\tthis.name = name;\n\t\tthis.shop = shop;\n\t\tthis.rating = rating;\n\t\tthis.price = price;\n\t\tthis.favourite = fav;\n\t\tthis.googlephoto = photo;\n\t\tthis.usertoken = token;\n\t\tthis.address = address;\n\t\tthis.marker.coords.latitude = lat;\n\t\tthis.marker.coords.longitude = lng;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Coffee [name=\" + name\n\t\t\t\t+ \", shop =\" + shop + \", rating=\" + rating + \", price=\" + price\n\t\t\t\t+ \", fav =\" + favourite + \" \"\n\t\t\t\t+ usertoken + \" \" + address + \" \" + marker.coords.latitude\n\t\t\t\t+ \" \" + marker.coords.longitude + \"]\";\n\t}\n}\n~~~\n\n**NOTE : It's very important that you delete any existing coffees you have on the server BEFORE you go ahead and add some dummy coffees (see below). Because our model has changed, specifically the 'marker' property, the JSON returned from the server has changed, so our CoffeeApi GET call will crash if it tries to request different types of Coffees (ones with location data and ones without) at the same time**\n\n### MapsFragment\n\nHere we need to inspect our list of coffees and (using the longitude and latitude coordinates) place a marker on the map indicating the location of each coffee.\n\nSo, first, open up your MapsFragment class and add the following method\n\n~~~java\npublic void addCoffees(List<Coffee> list){\n    for(Coffee c : list)\n        mMap.addMarker(new MarkerOptions()\n            .position(new LatLng(c.marker.coords.latitude, c.marker.coords.longitude))\n            .title(c.name + \" €\" + c.price)\n            .snippet(c.shop + \" \" + c.address)                 \n            .icon(BitmapDescriptorFactory.fromResource(R.drawable.coffee)));\n}\n~~~\n\nTo ensure our list of coffees is up to date and the most recent one, the MapsFragment class needs to implement the VolleyListener interface, so go ahead and complete that now.\n\nOnce you've implemented the necessary methods, add a call to ***addCoffees()*** in your ***setList()*** method.\n\nNow, add the following APi calls to your ***onResume()*** AFTER ***getMapAsync(this)***\n\n~~~java\nCoffeeApi.attachListener(this);\nCoffeeApi.get(\"/coffees/\" + app.googleToken);\n~~~\n\n### AddFragment\n\nAfter you've made those changes, you'll get an error in your `AddFragment` so for the moment, just pass in dummy data for location and address, like so\n\n~~~java\nCoffee c = new Coffee(coffeeName, coffeeShop, ratingValue,\n                    coffeePrice, false, app.googlePhotoURL, app.googleToken,\"\",0,0);\n~~~\n\nNow, obviously, we don't have any coffees with location info saved on the server yet, so before we try and go adding a coffee via the app, I'd suggest manually adding some dummy coffees using the following method - Make sure you comment it out after your first run, otherwise you'll have multiple coffees added to the same location :)\n\n~~~java\npublic void addCoffeeData(){\n        Coffee c1 = new Coffee(\"Standard Black FF\", \"Tescos\",2.5,1.99,true,\n                app.googlePhotoURL,app.googleToken,\"Address 1\", 52.26, -7.12);\n        Coffee c2 = new Coffee(\"Standard Green FF\", \"The Green Room\",2.5,1.99,false,\n                app.googlePhotoURL,app.googleToken,\"Address 2\",52.27, -7.13);\n        Coffee c3 = new Coffee(\"Regular Joe FF\", \"Joe's Place\",3.5,2.99,true,\n                app.googlePhotoURL,app.googleToken,\"Address 3\",52.24,-7.10);\n        Coffee c4 = new Coffee(\"Espresso FF\", \"Ardkeen Stores\",4.5,1.49,false,\n                app.googlePhotoURL,app.googleToken,\"Address 4\",52.25,-7.145);\n\n        CoffeeApi.post(\"/coffees/\" + app.googleToken,c1);\n        CoffeeApi.post(\"/coffees/\" + app.googleToken,c2);\n        CoffeeApi.post(\"/coffees/\" + app.googleToken,c3);\n        CoffeeApi.post(\"/coffees/\" + app.googleToken,c4);\n    }\n~~~\n\nso when you run your app, you know it's working correctly if you see your coffees, something like this - feel free to change the coordinates, or add in another coffee.\n\n![](img/mapmarkers.png)\n"
    },
  
    {
    "title": "# Adding a Coffee - Refactored for Location Data & Maps",
    "shortTitle": "05",
    "contentMd" : "# Adding a Coffee - Refactored for Location Data & Maps\n\nNow that we can see existing coffees on our Map, what about when we add new coffees on the device? This is the final step in our Case Study and involves a bit of work in refactoring our `AddFragment` as we need to grab the current location to save with our coffee details.\n\nAnd for fun :) we'll also embed our `MapsFragment` inside the `AddFragment` layout, so we can see where we're adding our coffee, like so\n\n![](img/addmap.png)\n\n\nFirst thing that needs to be done is make our `AddFragment` **Location Aware** so go ahead and ensure your Fragment implements the correct callback interface (***OnMapReadyCallback***) and also implement our ***VolleyListener*** to get the latest version of the coffees to display on the map. See if you can implement the necessary code to display the map with all the users coffees - you can refer to the lecture material if necessary, but basically you'll need to **GET** your coffees once the Map is **READY** and then **ADD** your coffees in the VolleyListener callback. \n\nNow open up your **fragment_add** and add the following fragment element\n\n~~~xml\n<fragment\n        android:name=\"ie.cm.fragments.MapsFragment\"\n        android:id=\"@+id/addmap\"\n        android:layout_width=\"364dp\"\n        android:layout_height=\"162dp\"\n       />\n~~~\n\n**Note that the fragment name is our own Custom MapFragment and not the standard MapFragment**. Your layout might be a bit all over the place as a result :) so I've since converted the layout to a ConstraintLayout, which you can find below and can replace yours with, if you wish?\n\n![](img/addmaplayout.png)\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/addLayout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".fragments.AddFragment\">\n\n    <TextView\n        android:id=\"@+id/addfooter\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"36dp\"\n        android:background=\"@color/colorPrimary\"\n        android:paddingTop=\"5dp\"\n        android:text=\"@string/appWebsite\"\n        android:textAlignment=\"center\"\n        android:textColor=\"@color/colorFontWhite\"\n        android:textSize=\"16sp\"\n        android:textStyle=\"bold\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.523\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"1.0\" />\n\n    <TextView\n        android:id=\"@+id/addPriceTV\"\n        android:layout_width=\"99dp\"\n        android:layout_height=\"43dp\"\n        android:layout_marginStart=\"36dp\"\n        android:layout_marginTop=\"8dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginBottom=\"8dp\"\n        android:paddingTop=\"10dp\"\n        android:text=\"@string/coffeePriceLbl\"\n        android:textAlignment=\"textEnd\"\n        android:textColor=\"@color/colorFontBlack\"\n        android:textSize=\"18sp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toStartOf=\"@+id/addPriceET\"\n        app:layout_constraintHorizontal_bias=\"0.0\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"0.21\" />\n\n    <TextView\n        android:id=\"@+id/addShopTV\"\n        android:layout_width=\"99dp\"\n        android:layout_height=\"43dp\"\n        android:layout_marginStart=\"36dp\"\n        android:layout_marginTop=\"8dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginBottom=\"8dp\"\n        android:paddingTop=\"10dp\"\n        android:text=\"@string/coffeeShopLbl\"\n        android:textAlignment=\"textEnd\"\n        android:textColor=\"@color/colorFontBlack\"\n        android:textSize=\"18sp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toStartOf=\"@+id/addShopET\"\n        app:layout_constraintHorizontal_bias=\"0.083\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"0.115\" />\n\n    <TextView\n        android:id=\"@+id/addNameTV\"\n        android:layout_width=\"99dp\"\n        android:layout_height=\"43dp\"\n        android:layout_marginStart=\"36dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:paddingTop=\"10dp\"\n        android:text=\"@string/coffeeNameLbl\"\n        android:textAlignment=\"textEnd\"\n        android:textColor=\"@color/colorFontBlack\"\n        android:textSize=\"18sp\"\n        app:layout_constraintBottom_toTopOf=\"@+id/addShopTV\"\n        app:layout_constraintEnd_toStartOf=\"@+id/addNameET\"\n        app:layout_constraintHorizontal_bias=\"0.0\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"0.882\" />\n\n    <EditText\n        android:id=\"@+id/addNameET\"\n        android:layout_width=\"189dp\"\n        android:layout_height=\"44dp\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginEnd=\"40dp\"\n        android:ems=\"10\"\n        android:hint=\"Enter Coffee Name\"\n        android:inputType=\"textPersonName\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.447\"\n        app:layout_constraintStart_toEndOf=\"@+id/addNameTV\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"0.034\" />\n\n    <EditText\n        android:id=\"@+id/addPriceET\"\n        android:layout_width=\"131dp\"\n        android:layout_height=\"42dp\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginEnd=\"100dp\"\n        android:ems=\"10\"\n        android:hint=\"Enter Price\"\n        android:inputType=\"numberDecimal\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.447\"\n        app:layout_constraintStart_toEndOf=\"@+id/addPriceTV\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"0.219\" />\n\n    <EditText\n        android:id=\"@+id/addShopET\"\n        android:layout_width=\"189dp\"\n        android:layout_height=\"45dp\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginEnd=\"40dp\"\n        android:ems=\"10\"\n        android:hint=\"Enter Shop\"\n        android:inputType=\"textPersonName\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.993\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"0.124\" />\n\n    <RatingBar\n        android:id=\"@+id/addRatingBar\"\n        android:layout_width=\"242dp\"\n        android:layout_height=\"52dp\"\n        android:layout_marginTop=\"20dp\"\n        android:rating=\"1\"\n        android:stepSize=\"0.5\"\n        app:layout_constraintBottom_toTopOf=\"@+id/editfooter\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/addPriceET\"\n        app:layout_constraintVertical_bias=\"0.213\" />\n\n\n    <fragment\n        android:id=\"@+id/addmap\"\n        android:name=\"ie.cm.fragments.MapsFragment\"\n        android:layout_width=\"364dp\"\n        android:layout_height=\"162dp\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"8dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginBottom=\"8dp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/addfooter\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"0.627\"\n        tools:layout=\"@layout/activity_map\" />\n\n    <Button\n        android:id=\"@+id/addCoffeeBtn\"\n        android:layout_width=\"79dp\"\n        android:layout_height=\"84dp\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"8dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginBottom=\"8dp\"\n        android:background=\"@color/colorFontOffWhite\"\n        android:drawableTop=\"@drawable/blue_add_48\"\n        android:elevation=\"5dp\"\n        android:text=\"@string/addCoffeeBtnLbl\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/addfooter\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.501\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/addmap\"\n        app:layout_constraintVertical_bias=\"0.125\" />\n\n</android.support.constraint.ConstraintLayout>\n~~~\n\nIf you run your app again and go to 'Add a Coffee' you should see something like this\n\n![](img/addmap.png)\n\n\nTake some time to experiment with send different coordinates to the emulator, while you are on the Add Coffee screen, and you should see the map move to that new location - another example of how useful fragments can be!\n"
    },
  
    {
    "title": "# Adding a Coffee - Updating the Map",
    "shortTitle": "06",
    "contentMd" : "# Adding a Coffee - Updating the Map\n\n\nCurrently we can see the users coffees on a map even while we are on the 'Add a Coffee' screen. Now let's look at updating that map with a newly added Coffee.\n\nFirst, open your add fragment and remove/comment out the intent to return 'Home', otherwise you'll never see the coffee marker being added.\n\nNow, update the coffee constructor fields to include the latitude and longitude values for the coffee being created and finally, try and implement the code necessary to update our map with the newly created coffee. This is actually a single line of code but refer to the lecture material if you're not sure.\n\nRun your app again, send some coordinates to change your current location, Add a coffee and you should get something like this\n\nFor example, we're here\n\n![](img/addmap1.png)\n\nand then change to here\n\n![](img/addmap2.png)\n\nand then we add a coffee\n\n![](img/addmap3.png)\n\nDon't forget to 'clear' the Map before you add your coffees or else you'll get markers on top of markers. Also, it might be useful to reset the fields after a coffee has been added (as above), so go ahead and implement that using the following method (but it is optional)\n\n\n~~~java\nprivate void resetFields() {\n        name.setText(\"\");\n        shop.setText(\"\");\n        price.setText(\"\");\n        ratingBar.setRating(2);\n        name.requestFocus();\n        name.setFocusable(true);\n    }\n~~~\n\nIf you click on one of the markers you've added from the device you'll notice that the address field is blank. We need to convert our coordinates into a meaningful address for the user, so that's next.\n"
    },
  
    {
    "title": "# Adding a Coffee - Reversing Geocoding",
    "shortTitle": "07",
    "contentMd" : "# Adding a Coffee - Reversing Geocoding\n\nAt this point when we add a new coffee, we can see it on the map instantly, but the address is empty if this is carried out on the device. To make sure the coffee address (as well as the other info) is stored correctly, we **Reverse Geocode** the location of the coffee into a meaningful street address and store that.\n\nIntroduce the following method into your `AddFragment`\n\n~~~java\nprivate String getAddressFromLocation( Location location ) {\n       Geocoder geocoder = new Geocoder( getActivity() );\n\n       String strAddress = \"\";\n       Address address;\n       try {\n           address = geocoder\n                   .getFromLocation( location.getLatitude(), location.getLongitude(), 1 )\n                   .get( 0 );\n           strAddress = address.getAddressLine(0) +\n                   \" \" + address.getAddressLine(1) +\n                   \" \" + address.getAddressLine(2);\n       }\n       catch (IOException e ) {\n       }\n\n       return strAddress;\n   }\n~~~\n\nand see if you can successfully achieve something along the lines of\n\nthis (before)\n![](img/mapaddress1.png)\n\nand then this (after)\n\n![](img/mapaddress2.png)\n\nHint : you'll have to make a few changes to the Coffee class as well as when you create the coffee before posting it to the server (Well that's how I did it anyway!)\n"
    },
  
    {
    "title": "# Solution",
    "shortTitle": "Solution",
    "contentMd" : "# Solution\n\nThis is a solution to the lab:\n\n- [CoffeeMate.8.0.Solution](archives/CoffeeMate.8.0.Solution.zip)\n"
    },
  
    {
    "title": "",
    "shortTitle": ".",
    "contentMd" : ""
    }
  
  ]
  }

