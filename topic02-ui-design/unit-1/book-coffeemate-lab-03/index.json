


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-03",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>In this Lab, <b>CoffeeMate.3.0</b> we will again build on the previous lab and add in more new features and UI Design. On completion of this lab you&#39;ll be able to use multiple Fragments in different Activities, use Spinners (dropdown lists), filter lists and use the <b>Application</b> Object</p>",
  "folder" : "book-coffeemate-lab-03",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Objectives",
    "shortTitle": "Lab-03",
    "contentMd" : "# Objectives\n\nIn this Lab, <b>CoffeeMate.3.0</b> we will again build on the previous lab and add in more new features and UI Design. On completion of this lab you'll be able to use multiple Fragments in different Activities, use Spinners (dropdown lists), filter lists and use the <b>Application</b> Object\n"
    },
  
    {
    "title": "# Setup - Starter Code",
    "shortTitle": "01",
    "contentMd" : "# Setup - Starter Code\n\nTo complete this lab you can either continue on with your solution from Lab 02 (CoffeeMate.2.0) or download the previous solution here [CoffeeMate.3.0.Starter](archives/CoffeeMate.3.0.Starter.zip)\n\nTo open this in Android Studio, first extract the archive somewhere on your hard drive and select 'File->Open' etc.\n\nOnce you open/import the <b>CoffeeMate.3.0</b> Project you'll probably need to 'Clean & Build' the project to fix any residual errors.\n\nNext, go ahead and create 2 new Empty Activities\n- <b>Favourites</b> and\n- <b>Search</b>\n\nand name the layouts appropriately (as we've done previously). Don't forget to set their Base class as '<b>Base</b>'.\n\n\nNext, replace your 'favourites' layout with this (you'll need to add a new 'red' color resource yourself)\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".activities.Favourites\">\n\n    <TextView\n        android:id=\"@+id/favouriteBarTV\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"21dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"108dp\"\n        android:background=\"@color/colorPrimary\"\n        android:text=\"@string/recentlyViewedLbl\"\n        android:textAlignment=\"center\"\n        android:textColor=\"@color/colorFontWhite\"\n        android:textSize=\"16sp\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <TextView\n        android:id=\"@+id/footer\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"36dp\"\n        android:background=\"@color/colorPrimary\"\n        android:paddingTop=\"5dp\"\n        android:text=\"@string/appWebsite\"\n        android:textAlignment=\"center\"\n        android:textColor=\"@color/colorFontWhite\"\n        android:textSize=\"16sp\"\n        android:textStyle=\"bold\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.0\"\n        app:layout_constraintStart_toStartOf=\"parent\" />\n\n    <FrameLayout\n        android:id=\"@+id/fragment_container\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0dp\"\n        android:layout_marginTop=\"8dp\"\n        app:layout_constraintBottom_toTopOf=\"@+id/footer\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/favouriteBarTV\">\n\n        <TextView\n            android:id=\"@+id/emptyList\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"top|center_horizontal\"\n            android:layout_marginTop=\"30dp\"\n            android:text=\"@string/emptyMessageLbl\"\n            android:textSize=\"12sp\"\n            app:layout_constraintHorizontal_bias=\"0.576\"\n            app:layout_constraintVertical_bias=\"0.533\" />\n    </FrameLayout>\n\n    <TextView\n        android:id=\"@+id/favouriteCoffeeName\"\n        android:layout_width=\"174dp\"\n        android:layout_height=\"40dp\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"8dp\"\n        android:text=\"CoffeeName\"\n        android:textAlignment=\"center\"\n        android:textColor=\"@color/colorFontBlack\"\n        android:textSize=\"30sp\"\n        android:textStyle=\"bold\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <TextView\n        android:id=\"@+id/favouriteCoffeeShop\"\n        android:layout_width=\"94dp\"\n        android:layout_height=\"25dp\"\n        android:layout_marginStart=\"48dp\"\n        android:layout_marginTop=\"20dp\"\n        android:text=\"shop\"\n        android:textAlignment=\"center\"\n        android:textColor=\"@color/colorPrimaryDark\"\n        android:textSize=\"18sp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/favouriteCoffeeName\" />\n\n    <TextView\n        android:id=\"@+id/favouriteCoffeePrice\"\n        android:layout_width=\"94dp\"\n        android:layout_height=\"25dp\"\n        android:layout_marginEnd=\"52dp\"\n        android:layout_marginTop=\"20dp\"\n        android:text=\"price\"\n        android:textAlignment=\"center\"\n        android:textColor=\"@color/colorPrimaryDark\"\n        android:textSize=\"18sp\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/favouriteCoffeeRating\" />\n\n    <TextView\n        android:id=\"@+id/favouriteCoffeeRating\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginEnd=\"56dp\"\n        android:layout_marginTop=\"8dp\"\n        android:text=\"Rating\"\n        android:textAlignment=\"center\"\n        android:textColor=\"@color/colorFontRed\"\n        android:textSize=\"30sp\"\n        android:textStyle=\"bold\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n\n</android.support.constraint.ConstraintLayout>\n~~~\n\nand your 'search' layout with this\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".activities.Search\">\n\n    <TextView\n        android:id=\"@+id/searchBarTV\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"21dp\"\n        android:background=\"@color/colorPrimary\"\n        android:text=\"@string/searchCoffeesLbl\"\n        android:textAlignment=\"center\"\n        android:textColor=\"@color/colorFontWhite\"\n        android:textSize=\"16sp\"\n        app:layout_constraintBottom_toTopOf=\"@+id/footer\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.0\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/searchSpinner\"\n        app:layout_constraintVertical_bias=\"0.0\" />\n\n    <TextView\n        android:id=\"@+id/footer\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"36dp\"\n        android:background=\"@color/colorPrimary\"\n        android:paddingTop=\"5dp\"\n        android:text=\"@string/appWebsite\"\n        android:textAlignment=\"center\"\n        android:textColor=\"@color/colorFontWhite\"\n        android:textSize=\"16sp\"\n        android:textStyle=\"bold\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.0\"\n        app:layout_constraintStart_toStartOf=\"parent\" />\n\n    <FrameLayout\n        android:id=\"@+id/fragment_container\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0dp\"\n        android:layout_marginTop=\"8dp\"\n        app:layout_constraintBottom_toTopOf=\"@+id/footer\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.5\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/searchBarTV\">\n\n        <TextView\n            android:id=\"@+id/emptyList\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"top|center_horizontal\"\n            android:layout_marginTop=\"30dp\"\n            android:text=\"@string/emptyMessageLbl\"\n            android:textSize=\"12sp\"\n            app:layout_constraintHorizontal_bias=\"0.576\"\n            app:layout_constraintVertical_bias=\"0.533\" />\n    </FrameLayout>\n\n    <Spinner\n        android:id=\"@+id/searchSpinner\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"50dp\"\n        android:layout_marginBottom=\"8dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"8dp\"\n        app:layout_constraintBottom_toTopOf=\"@+id/footer\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"0.112\" />\n\n    <SearchView\n        android:id=\"@+id/searchView\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"46dp\"\n        android:layout_marginBottom=\"8dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"8dp\"\n        android:visibility=\"visible\"\n        android:background=\"#fff\"\n        android:elevation=\"2dp\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/searchSpinner\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"0.14\" />\n\n</android.support.constraint.ConstraintLayout>\n~~~\n\nRun your app to confirm you can now load the 'search' and 'favourites' screens. If you can't, try and work out why. To point you in the right direction you may need to wire up the buttons on the layout to the relevant method in your <b>Home.java</b> which can be done like so\n\n![](img/onclick.png)\n\nNotice how the method is already listed as it's being picked up from the associated Activity.\n\nRun the app again to confirm.\n\nNext, create a new java class called <b>CoffeeFilter</b> in the 'adapters' package and replace it with the following\n\n~~~java\npublic class CoffeeFilter extends Filter {\n\tpublic List<Coffee> originalCoffeeList;\n\tpublic String filterText;\n\tpublic CoffeeListAdapter adapter;\n\n\tpublic CoffeeFilter(List<Coffee> originalCoffeeList, String filterText,\n                        CoffeeListAdapter adapter) {\n\t\tsuper();\n\t\tthis.originalCoffeeList = originalCoffeeList;\n\t\tthis.filterText = filterText;\n\t\tthis.adapter = adapter;\n\t}\n\n\tpublic void setFilter(String filterText) {\n\t\tthis.filterText = filterText;\n\t}\n\n\t@Override\n\tprotected FilterResults performFiltering(CharSequence prefix) {\n\t\tFilterResults results = new FilterResults();\n\n\t\tList<Coffee> newCoffees;\n\t\tString coffeeName;\n\n\t\tif (prefix == null || prefix.length() == 0) {\n\t\t\tnewCoffees = new ArrayList<>();\n\t\t\tif (filterText.equals(\"all\")) {\n\t\t\t\tresults.values = originalCoffeeList;\n\t\t\t\tresults.count = originalCoffeeList.size();\n\t\t\t} else {\n\t\t\t\tif (filterText.equals(\"favourites\")) {\n\t\t\t\t\tfor (Coffee c : originalCoffeeList)\n\t\t\t\t\t\tif (c.favourite)\n\t\t\t\t\t\t\tnewCoffees.add(c);\n\t\t\t\t}\n\t\t\t\tresults.values = newCoffees;\n\t\t\t\tresults.count = newCoffees.size();\n\t\t\t}\n\t\t} else {\n\t\t\tString prefixString = prefix.toString().toLowerCase();\n\t\t\tnewCoffees = new ArrayList<>();\n\n\t\t\tfor (Coffee c : originalCoffeeList) {\n\t\t\t\tcoffeeName = c.coffeeName.toLowerCase();\n\t\t\t\tif (coffeeName.contains(prefixString)) {\n\t\t\t\t\tif (filterText.equals(\"all\")) {\n\t\t\t\t\t\tnewCoffees.add(c);\n\t\t\t\t\t} else if (c.favourite) {\n\t\t\t\t\t\tnewCoffees.add(c);\n\t\t\t\t\t}}}\n\t\t\tresults.values = newCoffees;\n\t\t\tresults.count = newCoffees.size();\n\t\t}\n\t\treturn results;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\t@Override\n\tprotected void publishResults(CharSequence prefix, FilterResults results) {\n\n\t\tadapter.coffeeList = (ArrayList<Coffee>) results.values;\n\n\t\tif (results.count >= 0)\n\t\t\tadapter.notifyDataSetChanged();\n\t\telse {\n\t\t\tadapter.notifyDataSetInvalidated();\n\t\t\tadapter.coffeeList = originalCoffeeList;\n\t\t}\n\t}\n}\n~~~\n\nand finally, create a new 'Blank' Fragment called <b>SearchFragment</b> in the 'fragments' package with the following settings :\n\n![](img/blankfragment.png)\n\nOnce the initial setup is complete your <b>CoffeeMate 3.0</b> Project in Android Studio should looks as follows:\n\n![](img/starter.3.png)\n\nTake a few moments to familiarise yourself with the <b>new</b> classes in your project and explore the resources and layouts that you will be referring to throughout the lab, especially the new layouts in both 'Design' view and 'Text' view. It's also probably a good idea to run the App at this stage too, so you can set up your AVD (if you haven't done so already) and confirm that the starter app is configured properly and running (although 'Search' and 'Favourites' don't really do anything).\n\nIn this lab, you are required to do the following:\n\n- Display a list of the users 'Favourite' Coffees, highlighting the best 'rated' coffee\n\n- Allow Coffees in the list to be filtered on their type and name and rating.\n\nThe following steps will guide you through these requirements, so we'll start with refactoring the necessary classes.\n"
    },
  
    {
    "title": "# CoffeeMate 3.0 - A First Look",
    "shortTitle": "02",
    "contentMd" : "# CoffeeMate 3.0 - A First Look\n\nWhen we're finished this lab, we'll be able to display the users Favourite coffees and apply a filter to the list of coffees so the user can search on a coffee name or type, or both. If you've followed step 1 correctly you'll see that the 'Search' & 'Favourites' buttons are working, but not functioning properly - we're not seeing any refined list of coffees.\n\n ![](img/searchstarter.png) ![](img/favouritesstarter.png)\n\nFurthermore, there's nothing to select from the Spinner (second screenshot above) so the rest of this lab is all about refactoring existing classes to get these features working.\n\nIt's also worth confirming your <b>Home.java</b> looks something like below.\n\nThe following steps will take you through completing <b><i>CoffeeMate 3.0</i></b>.\n\n~~~java\npublic class Home extends Base {\n\n    TextView emptyList;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.home);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        emptyList = findViewById(R.id.emptyList);\n\n        FloatingActionButton fab = findViewById(R.id.fab);\n        fab.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar.make(view, \"Information\", Snackbar.LENGTH_LONG)\n                        .setAction(\"More Info...\", new View.OnClickListener() {\n                            @Override\n                            public void onClick(View view) {\n\n                            }\n                        }).show();\n            }\n        });\n        if(coffeeList.isEmpty()) setupCoffees();\n    }\n\n    public void add(View v) {\n        startActivity(new Intent(this, Add.class));\n    }\n\n    public void search(View v) {\n        startActivity(new Intent(this, Search.class));\n    }\n\n    public void favourites(View v) { startActivity(new Intent(this, Favourites.class));\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n\n        if(coffeeList.isEmpty())\n            emptyList.setText(getString(R.string.emptyMessageLbl));\n        else\n            emptyList.setText(\"\");\n\n        coffeeFragment = CoffeeFragment.newInstance(); //get a new Fragment instance\n        getFragmentManager().beginTransaction()\n                .replace(R.id.fragment_container, coffeeFragment)\n                .commit(); // add it to the current activity\n    }\n\n    public void setupCoffees(){\n        coffeeList.add(new Coffee(\"Standard Black\", \"Some Shop\",2.5,1.99,false));\n        coffeeList.add(new Coffee(\"Regular Joe\", \"Joe's Place\",3.5,2.99,true));\n        coffeeList.add(new Coffee(\"Espresso\", \"Ardkeen Stores\",4.5,1.49,true));\n    }\n}\n~~~\n"
    },
  
    {
    "title": "# Reusing Fragments - 'Search' & Favourites'",
    "shortTitle": "03",
    "contentMd" : "# Reusing Fragments - 'Search' & Favourites'\n\nIf you recall in <b><i>CoffeeMate 2.0</i></b> we used a <b><i>Fragment</i></b> to display our list of coffees inside our Home Screen. A Fragments main purpose is to be <u><i>reused</i></u>, so we can use our existing Fragment in both our Search & Favourites Screens.\n\n#Search & Favourites Screens\n\nThe first thing we'll do is add the Fragment to our <b>Search.java</b> and <b>Favourites.java</b> Activity classes. This is pretty straightforward as we have already done this in our <b>Home.java</b> in <b><i>CoffeeMate 2.0</i></b>.\n\n~~~java\n  coffeeFragment = CoffeeFragment.newInstance(); //get a new Fragment instance\n            getFragmentManager()\n                    .beginTransaction()\n                    .replace(R.id.fragment_container, coffeeFragment)\n                    .commit(); // add/replace in the current activity\n~~~\n\nYou can literally cut & paste the above code into both activity classes <b>onResume()</b> method and run the app, so see what you get?\n\nAnd don't forget you can use Android Studio's tools for overriding methods (Here's another way to do it)\n\n![](img/lab0405a.png)\n\nand then\n\n![](img/lab0405b.png)\n\nYou should be seeing something like the following :\n\n![](img/searchlist.png) ![](img/favouriteslist.png)\n\nIf you're seeing the \"empty coffees\" message behind the list, have a look at your Home.java and see if you can fix that?\n\nObviously, our Favourites isn't filtered to show just 'Favourite Coffees' (we'll get to that later), but this does really illustrate the benefits of using Fragments when we can. See if you can edit and/or delete coffees?\n\nThe next step is introducing the Filter so the user can view their Favourite Coffees (and eventually search).\n"
    },
  
    {
    "title": "# Reusing Fragments - Filtering Favourite Coffees",
    "shortTitle": "04",
    "contentMd" : "# Reusing Fragments - Filtering Favourite Coffees\n\nAs mentioned in the Lectures, a <i>ListView</i> supports filtering of elements via its adapter. In this step we will associate our custom filter (<b>CoffeeFilter.java</b>) with our <i>CoffeeFragment</i> so that we have the ability to filter this list whatever way we want, on any screen we want.\n\n#Our Custom Filter - <b>CoffeeFilter.java</b>\n\nFirst of all, familiarise yourself with the (already supplied) <i>CoffeeFilter</i> class. Pay particular attention to the two methods that had to be implemented to actually filter the data and then 'publish' the results and make sure you understand what's going on.\n\nNext, have a look at the constructor\n\n~~~java\npublic CoffeeFilter(List<Coffee> originalCoffeeList, String filterText,\n\t\t\tCoffeeListAdapter adapter) {\n\t\tsuper();\n\t\tthis.originalCoffeeList = originalCoffeeList;\n\t\tthis.filterText = filterText;\n\t\tthis.adapter = adapter;\n\t}\n~~~\n\nand see if you can create an instance called <i>coffeeFilter</i> inside our <i>CoffeeFragment</i> without referring to the notes.\n\n#Filtering our Favourites\n\nOnce you have the filter set up, the next step is to call it's filter method correctly to filter out just the 'Favourite' coffees and display them in our list. To achieve this you'll need to call the following code (can you work out where it should go inside our <i>CoffeeFragment</i>?)\n\n~~~java\nif (getActivity() instanceof Favourites) {\n      coffeeFilter.setFilter(\"favourites\"); // Set the filter text field from 'all' to 'favourites'\n      coffeeFilter.filter(null); // Filter the data, but don't use any prefix\n      listAdapter.notifyDataSetChanged(); // Update the adapter\n    }\n~~~\n\nIf you run the app again, and select the Favourites Button, you should now see just the 'Favourite' coffees, like so:\n\n![](img/filterfavourites1.png)\n\nNote that we didn't have to modify a single line of code in our <b>Favourites.java</b> Activity class.\n\nThere's still a few issues with our <b>Favourites</b> though, if you've done some proper testing? And tried to delete multiple coffees via the context menu? Can you identify how to fix it?\n\nHint : You'll be focusing on the 'deleteCoffees() method and having to 'filter' again. (Or you can always check the notes!)\n\nThe next thing to do is display a \"Random Suggestion\" Favourite coffee that the user could/should try, so using the following, have a go at that.\n\n~~~java\npublic void setRandomCoffee() {\n\n        ArrayList<Coffee> coffeeList = (ArrayList<Coffee>)activity.coffeeList.clone();\n        Iterator<Coffee> itr = coffeeList.iterator();\n\n        while(itr.hasNext()) {\n            Coffee c = itr.next();\n            if (!c.favourite)\n                itr.remove();\n        }\n        if (activity instanceof Favourites)\n            if( !coffeeList.isEmpty()) {\n                Coffee randomCoffee = coffeeList.get(new Random()\n                            .nextInt(coffeeList.size()));\n\n              // Set the details on the layout\n            }\n            else {\n                // Set default details\n            }\n    }\n~~~\n\nNow, whenever the user loads up the favourites screen, they'll see their favourite coffees and a suggestion, like so :)\n\n![](img/random1.png)\n\nNext we'll look at searching our coffees by name and/or type.\n"
    },
  
    {
    "title": "# Reusing Fragments - Searching Coffees",
    "shortTitle": "05",
    "contentMd" : "# Reusing Fragments - Searching Coffees\n\nWe now have a Fragment that has filtering capabilities so we use these to search our list of coffees and refine the list based on either the coffees name, it's type, or both. To achieve this, we'll subclass our existing <b><i>CoffeeFragment</i></b> and create new class called <b><i>SearchFragment</i></b> and associate this Fragment with our <b>Search.java</b> Activity class.\n\n#SearchFragment.java\n\nHave a quick look at the existing <b><i>SearchFragment</i></b> class (the one you created earlier in the lab):\n\n~~~java\npublic class SearchFragment extends CoffeeFragment {\n\n    public SearchFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        TextView textView = new TextView(getActivity());\n        textView.setText(R.string.hello_blank_fragment);\n        return textView;\n    }\n}\n\n~~~\n\nThere's not much in there, so first replace it with the following :\n\n~~~java\npublic class SearchFragment extends Fragment {\n\n    public SearchFragment() {\n        // Required empty public constructor\n    }\n\n    public static SearchFragment newInstance() {\n        SearchFragment fragment = new SearchFragment();\n        return fragment;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);    \n    }\n\n    @Override\n    public void onAttach(Context c) { super.onAttach(c); }\n\n    @Override\n    public void onStart() { super.onStart(); }\n}\n~~~\n\n\nAnd the next thing we'll do is add some choices to the Spinner so the user can filter on a 'type'.\n\nWe'll use an Adapter to populate the Spinner data so have a go at completing the following:\n\nFirst, create the Resource Array\n\n~~~xml\n<string-array name=\"coffeeTypes\">\n        <item>All Types</item>\n        <item>Favourites</item>\n        <item>\\> 3\\* Rating</item>\n    </string-array>\n~~~\n\nthen the Adapter\n\n~~~java\n\tArrayAdapter<CharSequence> spinnerAdapter = ArrayAdapter\n\t\t\t\t.createFromResource(/*activity reference*/, /*the options to display*/,\n\t\t\t\t\t\tandroid.R.layout.simple_spinner_item);\n\n\tspinnerAdapter\n\t\t.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n~~~\n\nNext, bind to the Spinner widget of the layout\n\n~~~java\n\tSpinner spinner = /*Bind to the spinner widget R.id.searchCoffeeTypeSpinner*/;\n~~~\n\nand finally, set the Spinners adapter to the adapter you've set up (<i>spinnerAdapter</i>).\n\nIf you run your app again, you would expect to see the Spinner showing data - but it does not. Can you work out what the issue is? (HINT: Have a look at the <b>Search.java</b> Activity class and the type of Fragment being loaded)\n\nIf you've spotted what needed to be changed, run the app one more time and you should now be seeing something like this when you click on the Spinner.\n\n![](img/spinner1.png)\n\nand\n\n![](img/spinner2.png)\n\nThe last step is to add the listeners for the <b><i>Spinner</i></b> and <b><i>SearchView</i></b> widgets to filter the list on the users selections.\n"
    },
  
    {
    "title": "# Reusing Fragments - Adding Event Handlers",
    "shortTitle": "06",
    "contentMd" : "# Reusing Fragments - Adding Event Handlers\n\nAt the moment, if the user types in some text or selects an option from the Spinner on the Search screen, nothings happens as there's no code attached to these types of events. This step involves implementing the necessary interfaces to complete the lab.\n\nIf you haven't been doing so already, you should definitely make use of the Android Studio features to speed up this process, so all we will be left with is writing the specific code for what we want to happen.\n\n#Handling the Spinner with the <u>OnItemSelectedListener</u> interface\n\nFirst of all, ensure your <b>SearchFragment</b> implements the correct interface\n\n~~~java\nimplements AdapterView.OnItemSelectedListener\n~~~\n\nand use Android Studio to implement the interface methods like so\n\n![](img/lab0409.png)\n\n\nand you get the following:\n\n~~~java\n  @Override\n\tpublic void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\n    }\n\n\t@Override\n\tpublic void onNothingSelected(AdapterView<?> parent) {\n\n\t}\n~~~\n\nWe only need to complete the <i>onItemSelected</i> method to filter our list when the user selects a particular 'type' of coffee, as follows:\n\n\nIntroduce a new global String variable 'selected' then\n\nIntroduce this helper method\n\n~~~java\nprivate void checkSelected(String selected)\n    {\n        if (selected != null) {\n            if (selected.equals(\"All Types\")) {\n                coffeeFilter.setFilter(\"all\");\n            } else if (selected.equals(\"Favourites\")) {\n                coffeeFilter.setFilter(\"favourites\");\n            }\n\n            String filterText = ((SearchView)activity\n                    .findViewById(R.id.searchView)).getQuery().toString();\n\n            if(filterText.length() > 0)\n                coffeeFilter.filter(filterText);\n            else\n                coffeeFilter.filter(\"\");\n        }\n    }\n~~~\nand finally, inside 'onItemSelected'\n\n~~~java\n  selected = parent.getItemAtPosition(position).toString();\n  checkSelected(selected);\n~~~\n\nOnce again, be clear about what is going here.\n\nWe also need to override our 'deleteCoffees()' method in the super class to ensure our context menu continues to function as expected, so revisit 'CoffeeFragment' and change the access modifier of the method to public and then introduce the following method into your 'SearchFragment'\n\n~~~java\n@Override\n\tpublic void deleteCoffees(ActionMode actionMode) {\n\t\tsuper.deleteCoffees(actionMode);\n\t\tcheckSelected(selected);\n\t}\n~~~\n\nThe last thing to do is set the spinners listener, so have a go at this method call.\n\nRun your app again to confirm everything is still working as expected.\n\n#Handling the SearchView with <b><i>OnQueryTextListener</i></b>\n\nSimilar to handling the <b><i>Spinner</i></b> try and use the Android Studio features to implement the <b><i>OnQueryTextListener</i></b> interface. If you've done this correctly you'll have the following method stubs:\n\n~~~java\n@Override\n            public boolean onQueryTextSubmit(String query) {\n\n                return false;\n            }\n\n            @Override\n            public boolean onQueryTextChange(String newText) {\n\n                return false;\n            }\n~~~\n\nAnd there's actually very little code necessary to implement this feature, so see if you can complete this final step without referring to the lecture material.\n\nHINT: the <i>filter</i> method of our coffee filter takes a String to filter on and you need to add the relevant listener to the <b><i>SearchView</i></b>.\n\nOnce you have that up and running you should be seeing something like this during filtering:\n\n![](img/filter1.png)\n\n![](img/filter2.png)\n\n![](img/filter3.png)\n"
    },
  
    {
    "title": "# The Application Object",
    "shortTitle": "07",
    "contentMd" : "# The Application Object\n\nIn order to keep our application design coherent, we now bring in an 'Application' object.\n\nCreate a new package called 'ie.cm.main' and incorporate this class here:\n\n~~~java\npackage ie.cm.main;\n\nimport ie.cm.models.Coffee;\nimport java.util.ArrayList;\nimport java.util.List;\nimport android.app.Application;\nimport android.util.Log;\n\npublic class CoffeeMateApp extends Application\n{\n  public List <Coffee>  coffeeList = new ArrayList<Coffee>();\n\n  @Override\n  public void onCreate()\n  {\n    super.onCreate();\n    Log.v(\"coffeemate\", \"CoffeeMate App Started\");\n  }\n}\n~~~\n\nApplication objects need to be referenced in the AndroidManifest.xml - at the very top as 'andorid:name'\n\n~~~xml\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\"\n        android:name=\"ie.cm.main.CoffeeMateApp\">\n~~~\n\nMake sure the 'CoffeeMate App Started' appears in the logs to verify that it has actually been engaged correctly, when you launch the app.\n\nAs we now want our Application Object to manage or list of coffees, we need to replace all references of the list from Base with a reference to our Application Object list.\n\nThe Base class will now look something like this\n\n~~~java\n\n...\n\npublic class Base extends Activity {\n\n  public    CoffeeMateApp  app;\n  protected Bundle         activityInfo;\n  public    Fragment       coffeeFragment;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    app = (CoffeeMateApp) getApplication();\n  }\n\n...\n\n~~~\n\nYou can then access the list of coffees via the Base class 'app' reference like so...\n\nOur refactored 'Add'\n\n~~~java\n\napp.coffeeList.add(c);\n\n~~~\n\nSee if you can refactor the rest of the affected classes.....\n"
    },
  
    {
    "title": "# Solution",
    "shortTitle": "Solution",
    "contentMd" : "# Solution\n\nThis is a solution to the lab:\n\n- [CoffeeMate.3.0.Solution](archives/CoffeeMate.3.0.Solution.zip) including some bug fixes!\n\nIn this lab you have experimented with Custom Adapters, Fragments and Filters, and the Application Object:\n\n- Now go have a coffee :-)\n"
    }
  
  ]
  }

